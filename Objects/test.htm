<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Thu May 15 11:04:36 2025
<BR><P>
<H3>Maximum Stack Usage =        192 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Task_Display &rArr; GY86_Show &rArr; OLED_ShowSignedNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte &rArr; OLED_W_SDA
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[f7]">OS_CPU_SR_Save</a>
 <LI><a href="#[f9]">OS_CPU_SR_Restore</a>
 <LI><a href="#[14a]">OSStartHighRdy</a>
 <LI><a href="#[175]">OSCtxSw</a>
 <LI><a href="#[11b]">OSIntCtxSw</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[5c]">mySystemInit</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[59]">CRYP_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5f]">OSTmr_Task</a> from os_tmr.o(i.OSTmr_Task) referenced from os_tmr.o(i.OSTmr_InitTask)
 <LI><a href="#[60]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OS_InitTaskIdle)
 <LI><a href="#[5e]">OS_TaskReturn</a> from os_task.o(i.OS_TaskReturn) referenced from os_cpu_c.o(i.OSTaskStkInit)
 <LI><a href="#[61]">OS_TaskStat</a> from os_core.o(i.OS_TaskStat) referenced from os_core.o(i.OS_InitTaskStat)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from os_cpu_c.o(i.SysTick_Handler) referenced from startup.o(RESET)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from ppm.o(i.TIM3_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[63]">Task1</a> from mytask.o(i.Task1) referenced from main.o(i.mymain)
 <LI><a href="#[64]">Task2</a> from mytask.o(i.Task2) referenced from main.o(i.mymain)
 <LI><a href="#[66]">Task_Display</a> from mytask.o(i.Task_Display) referenced from main.o(i.mymain)
 <LI><a href="#[65]">Task_RCControl</a> from mytask.o(i.Task_RCControl) referenced from main.o(i.mymain)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from bluetooth.o(i.USART1_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[62]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[5d]">myScaterload</a> from system.o(.text) referenced from startup.o(.text)
 <LI><a href="#[5c]">mySystemInit</a> from os_cpu_a.o(.text) referenced from startup.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1c2]"></a>__asm___8_mytask_c_Task1____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mytask.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__asm___7_Delay_c_4ff3a6fa____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, delay.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1c4]"></a>__asm___5_led_c_led_init____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1c5]"></a>__asm___11_Bluetooth_c_3c8d9191____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bluetooth.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1c6]"></a>__asm___7_Final_c_ALL_Init____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, final.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1c7]"></a>__asm___6_GY86_c_SCL_W____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gy86.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1c8]"></a>__asm___7_Motor_c_61e0de04____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, motor.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1c9]"></a>__asm___6_oled_c_295535ed____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__asm___5_ppm_c_PPM_Time____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ppm.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__asm___6_misc_c_d0fc1254____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, misc.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1cc]"></a>__asm___15_stm32f4xx_adc_c_e11a2ea2____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1cd]"></a>__asm___15_stm32f4xx_can_c_347dae01____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_can.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1ce]"></a>__asm___15_stm32f4xx_cec_c____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_cec.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1cf]"></a>__asm___15_stm32f4xx_crc_c_eea4c7d3____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_crc.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__asm___16_stm32f4xx_cryp_c_459f21d3____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1d1]"></a>__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_cryp_aes.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__asm___20_stm32f4xx_cryp_des_c_9174d91f____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_cryp_des.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1d3]"></a>__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_cryp_tdes.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1d4]"></a>__asm___15_stm32f4xx_dac_c_4da4a0a9____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dac.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1d5]"></a>__asm___18_stm32f4xx_dbgmcu_c_588a430f____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dbgmcu.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1d6]"></a>__asm___16_stm32f4xx_dcmi_c_3610e7fb____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1d7]"></a>__asm___17_stm32f4xx_dfsdm_c____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dfsdm.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__asm___15_stm32f4xx_dma_c_e9b554c0____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1d9]"></a>__asm___17_stm32f4xx_dma2d_c_de80eb9a____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1da]"></a>__asm___15_stm32f4xx_dsi_c____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dsi.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1db]"></a>__asm___16_stm32f4xx_exti_c_28b3b60e____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__asm___17_stm32f4xx_flash_c_a2a150d6____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1dd]"></a>__asm___25_stm32f4xx_flash_ramfunc_c_66cdcef2____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_flash_ramfunc.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1de]"></a>__asm___18_stm32f4xx_fmpi2c_c____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_fmpi2c.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1df]"></a>__asm___16_stm32f4xx_gpio_c_f8e8e39a____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1e0]"></a>__asm___16_stm32f4xx_hash_c_90573c7c____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hash.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1e1]"></a>__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hash_md5.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1e2]"></a>__asm___21_stm32f4xx_hash_sha1_c_328c56b9____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hash_sha1.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1e3]"></a>__asm___15_stm32f4xx_i2c_c_7174d409____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1e4]"></a>__asm___16_stm32f4xx_iwdg_c_15798b01____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1e5]"></a>__asm___17_stm32f4xx_lptim_c____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_lptim.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1e6]"></a>__asm___16_stm32f4xx_ltdc_c_74c236bc____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1e7]"></a>__asm___15_stm32f4xx_pwr_c_0c2a8b75____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1e8]"></a>__asm___16_stm32f4xx_qspi_c____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_qspi.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1e9]"></a>__asm___15_stm32f4xx_rcc_c_49e27980____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__asm___15_stm32f4xx_rng_c____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_rng.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1eb]"></a>__asm___15_stm32f4xx_rtc_c_81435638____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1ec]"></a>__asm___15_stm32f4xx_sai_c_191626f0____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_sai.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__asm___16_stm32f4xx_sdio_c_c8827541____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1ee]"></a>__asm___19_stm32f4xx_spdifrx_c____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spdifrx.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1ef]"></a>__asm___15_stm32f4xx_spi_c_2b928927____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1f0]"></a>__asm___18_stm32f4xx_syscfg_c_57637610____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__asm___15_stm32f4xx_tim_c_c458916b____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1f2]"></a>__asm___17_stm32f4xx_usart_c_9565154b____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1f3]"></a>__asm___16_stm32f4xx_wwdg_c_9668c0ca____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_wwdg.o(.rev16_text), UNUSED)

<P><STRONG><a name="[1f4]"></a>__asm___8_mytask_c_Task1____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mytask.o(.revsh_text), UNUSED)

<P><STRONG><a name="[1f5]"></a>__asm___7_Delay_c_4ff3a6fa____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, delay.o(.revsh_text), UNUSED)

<P><STRONG><a name="[1f6]"></a>__asm___5_led_c_led_init____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led.o(.revsh_text), UNUSED)

<P><STRONG><a name="[1f7]"></a>__asm___11_Bluetooth_c_3c8d9191____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bluetooth.o(.revsh_text), UNUSED)

<P><STRONG><a name="[1f8]"></a>__asm___7_Final_c_ALL_Init____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, final.o(.revsh_text), UNUSED)

<P><STRONG><a name="[1f9]"></a>__asm___6_GY86_c_SCL_W____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gy86.o(.revsh_text), UNUSED)

<P><STRONG><a name="[1fa]"></a>__asm___7_Motor_c_61e0de04____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, motor.o(.revsh_text), UNUSED)

<P><STRONG><a name="[1fb]"></a>__asm___6_oled_c_295535ed____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled.o(.revsh_text), UNUSED)

<P><STRONG><a name="[1fc]"></a>__asm___5_ppm_c_PPM_Time____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ppm.o(.revsh_text), UNUSED)

<P><STRONG><a name="[1fd]"></a>__asm___6_misc_c_d0fc1254____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, misc.o(.revsh_text), UNUSED)

<P><STRONG><a name="[1fe]"></a>__asm___15_stm32f4xx_adc_c_e11a2ea2____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.revsh_text), UNUSED)

<P><STRONG><a name="[1ff]"></a>__asm___15_stm32f4xx_can_c_347dae01____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_can.o(.revsh_text), UNUSED)

<P><STRONG><a name="[200]"></a>__asm___15_stm32f4xx_cec_c____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_cec.o(.revsh_text), UNUSED)

<P><STRONG><a name="[201]"></a>__asm___15_stm32f4xx_crc_c_eea4c7d3____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_crc.o(.revsh_text), UNUSED)

<P><STRONG><a name="[202]"></a>__asm___16_stm32f4xx_cryp_c_459f21d3____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(.revsh_text), UNUSED)

<P><STRONG><a name="[203]"></a>__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_cryp_aes.o(.revsh_text), UNUSED)

<P><STRONG><a name="[204]"></a>__asm___20_stm32f4xx_cryp_des_c_9174d91f____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_cryp_des.o(.revsh_text), UNUSED)

<P><STRONG><a name="[205]"></a>__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_cryp_tdes.o(.revsh_text), UNUSED)

<P><STRONG><a name="[206]"></a>__asm___15_stm32f4xx_dac_c_4da4a0a9____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dac.o(.revsh_text), UNUSED)

<P><STRONG><a name="[207]"></a>__asm___18_stm32f4xx_dbgmcu_c_588a430f____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dbgmcu.o(.revsh_text), UNUSED)

<P><STRONG><a name="[208]"></a>__asm___16_stm32f4xx_dcmi_c_3610e7fb____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(.revsh_text), UNUSED)

<P><STRONG><a name="[209]"></a>__asm___17_stm32f4xx_dfsdm_c____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dfsdm.o(.revsh_text), UNUSED)

<P><STRONG><a name="[20a]"></a>__asm___15_stm32f4xx_dma_c_e9b554c0____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.revsh_text), UNUSED)

<P><STRONG><a name="[20b]"></a>__asm___17_stm32f4xx_dma2d_c_de80eb9a____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(.revsh_text), UNUSED)

<P><STRONG><a name="[20c]"></a>__asm___15_stm32f4xx_dsi_c____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dsi.o(.revsh_text), UNUSED)

<P><STRONG><a name="[20d]"></a>__asm___16_stm32f4xx_exti_c_28b3b60e____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.revsh_text), UNUSED)

<P><STRONG><a name="[20e]"></a>__asm___17_stm32f4xx_flash_c_a2a150d6____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.revsh_text), UNUSED)

<P><STRONG><a name="[20f]"></a>__asm___25_stm32f4xx_flash_ramfunc_c_66cdcef2____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_flash_ramfunc.o(.revsh_text), UNUSED)

<P><STRONG><a name="[210]"></a>__asm___18_stm32f4xx_fmpi2c_c____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_fmpi2c.o(.revsh_text), UNUSED)

<P><STRONG><a name="[211]"></a>__asm___16_stm32f4xx_gpio_c_f8e8e39a____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.revsh_text), UNUSED)

<P><STRONG><a name="[212]"></a>__asm___16_stm32f4xx_hash_c_90573c7c____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hash.o(.revsh_text), UNUSED)

<P><STRONG><a name="[213]"></a>__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hash_md5.o(.revsh_text), UNUSED)

<P><STRONG><a name="[214]"></a>__asm___21_stm32f4xx_hash_sha1_c_328c56b9____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hash_sha1.o(.revsh_text), UNUSED)

<P><STRONG><a name="[215]"></a>__asm___15_stm32f4xx_i2c_c_7174d409____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.revsh_text), UNUSED)

<P><STRONG><a name="[216]"></a>__asm___16_stm32f4xx_iwdg_c_15798b01____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.revsh_text), UNUSED)

<P><STRONG><a name="[217]"></a>__asm___17_stm32f4xx_lptim_c____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_lptim.o(.revsh_text), UNUSED)

<P><STRONG><a name="[218]"></a>__asm___16_stm32f4xx_ltdc_c_74c236bc____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(.revsh_text), UNUSED)

<P><STRONG><a name="[219]"></a>__asm___15_stm32f4xx_pwr_c_0c2a8b75____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.revsh_text), UNUSED)

<P><STRONG><a name="[21a]"></a>__asm___16_stm32f4xx_qspi_c____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_qspi.o(.revsh_text), UNUSED)

<P><STRONG><a name="[21b]"></a>__asm___15_stm32f4xx_rcc_c_49e27980____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.revsh_text), UNUSED)

<P><STRONG><a name="[21c]"></a>__asm___15_stm32f4xx_rng_c____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_rng.o(.revsh_text), UNUSED)

<P><STRONG><a name="[21d]"></a>__asm___15_stm32f4xx_rtc_c_81435638____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.revsh_text), UNUSED)

<P><STRONG><a name="[21e]"></a>__asm___15_stm32f4xx_sai_c_191626f0____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_sai.o(.revsh_text), UNUSED)

<P><STRONG><a name="[21f]"></a>__asm___16_stm32f4xx_sdio_c_c8827541____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.revsh_text), UNUSED)

<P><STRONG><a name="[220]"></a>__asm___19_stm32f4xx_spdifrx_c____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spdifrx.o(.revsh_text), UNUSED)

<P><STRONG><a name="[221]"></a>__asm___15_stm32f4xx_spi_c_2b928927____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.revsh_text), UNUSED)

<P><STRONG><a name="[222]"></a>__asm___18_stm32f4xx_syscfg_c_57637610____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.revsh_text), UNUSED)

<P><STRONG><a name="[223]"></a>__asm___15_stm32f4xx_tim_c_c458916b____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.revsh_text), UNUSED)

<P><STRONG><a name="[224]"></a>__asm___17_stm32f4xx_usart_c_9565154b____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.revsh_text), UNUSED)

<P><STRONG><a name="[225]"></a>__asm___16_stm32f4xx_wwdg_c_9668c0ca____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_wwdg.o(.revsh_text), UNUSED)

<P><STRONG><a name="[226]"></a>__asm___8_mytask_c_Task1____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mytask.o(.rrx_text), UNUSED)

<P><STRONG><a name="[227]"></a>__asm___7_Delay_c_4ff3a6fa____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, delay.o(.rrx_text), UNUSED)

<P><STRONG><a name="[228]"></a>__asm___5_led_c_led_init____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led.o(.rrx_text), UNUSED)

<P><STRONG><a name="[229]"></a>__asm___11_Bluetooth_c_3c8d9191____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bluetooth.o(.rrx_text), UNUSED)

<P><STRONG><a name="[22a]"></a>__asm___7_Final_c_ALL_Init____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, final.o(.rrx_text), UNUSED)

<P><STRONG><a name="[22b]"></a>__asm___6_GY86_c_SCL_W____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gy86.o(.rrx_text), UNUSED)

<P><STRONG><a name="[22c]"></a>__asm___7_Motor_c_61e0de04____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor.o(.rrx_text), UNUSED)

<P><STRONG><a name="[22d]"></a>__asm___6_oled_c_295535ed____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oled.o(.rrx_text), UNUSED)

<P><STRONG><a name="[22e]"></a>__asm___5_ppm_c_PPM_Time____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ppm.o(.rrx_text), UNUSED)

<P><STRONG><a name="[22f]"></a>__asm___6_misc_c_d0fc1254____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, misc.o(.rrx_text), UNUSED)

<P><STRONG><a name="[230]"></a>__asm___15_stm32f4xx_adc_c_e11a2ea2____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.rrx_text), UNUSED)

<P><STRONG><a name="[231]"></a>__asm___15_stm32f4xx_can_c_347dae01____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_can.o(.rrx_text), UNUSED)

<P><STRONG><a name="[232]"></a>__asm___15_stm32f4xx_cec_c____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_cec.o(.rrx_text), UNUSED)

<P><STRONG><a name="[233]"></a>__asm___15_stm32f4xx_crc_c_eea4c7d3____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_crc.o(.rrx_text), UNUSED)

<P><STRONG><a name="[234]"></a>__asm___16_stm32f4xx_cryp_c_459f21d3____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(.rrx_text), UNUSED)

<P><STRONG><a name="[235]"></a>__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_cryp_aes.o(.rrx_text), UNUSED)

<P><STRONG><a name="[236]"></a>__asm___20_stm32f4xx_cryp_des_c_9174d91f____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_cryp_des.o(.rrx_text), UNUSED)

<P><STRONG><a name="[237]"></a>__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_cryp_tdes.o(.rrx_text), UNUSED)

<P><STRONG><a name="[238]"></a>__asm___15_stm32f4xx_dac_c_4da4a0a9____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dac.o(.rrx_text), UNUSED)

<P><STRONG><a name="[239]"></a>__asm___18_stm32f4xx_dbgmcu_c_588a430f____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dbgmcu.o(.rrx_text), UNUSED)

<P><STRONG><a name="[23a]"></a>__asm___16_stm32f4xx_dcmi_c_3610e7fb____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(.rrx_text), UNUSED)

<P><STRONG><a name="[23b]"></a>__asm___17_stm32f4xx_dfsdm_c____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dfsdm.o(.rrx_text), UNUSED)

<P><STRONG><a name="[23c]"></a>__asm___15_stm32f4xx_dma_c_e9b554c0____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.rrx_text), UNUSED)

<P><STRONG><a name="[23d]"></a>__asm___17_stm32f4xx_dma2d_c_de80eb9a____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(.rrx_text), UNUSED)

<P><STRONG><a name="[23e]"></a>__asm___15_stm32f4xx_dsi_c____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dsi.o(.rrx_text), UNUSED)

<P><STRONG><a name="[23f]"></a>__asm___16_stm32f4xx_exti_c_28b3b60e____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.rrx_text), UNUSED)

<P><STRONG><a name="[240]"></a>__asm___17_stm32f4xx_flash_c_a2a150d6____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.rrx_text), UNUSED)

<P><STRONG><a name="[241]"></a>__asm___25_stm32f4xx_flash_ramfunc_c_66cdcef2____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_flash_ramfunc.o(.rrx_text), UNUSED)

<P><STRONG><a name="[242]"></a>__asm___18_stm32f4xx_fmpi2c_c____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_fmpi2c.o(.rrx_text), UNUSED)

<P><STRONG><a name="[243]"></a>__asm___16_stm32f4xx_gpio_c_f8e8e39a____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.rrx_text), UNUSED)

<P><STRONG><a name="[244]"></a>__asm___16_stm32f4xx_hash_c_90573c7c____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hash.o(.rrx_text), UNUSED)

<P><STRONG><a name="[245]"></a>__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hash_md5.o(.rrx_text), UNUSED)

<P><STRONG><a name="[246]"></a>__asm___21_stm32f4xx_hash_sha1_c_328c56b9____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hash_sha1.o(.rrx_text), UNUSED)

<P><STRONG><a name="[247]"></a>__asm___15_stm32f4xx_i2c_c_7174d409____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.rrx_text), UNUSED)

<P><STRONG><a name="[248]"></a>__asm___16_stm32f4xx_iwdg_c_15798b01____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.rrx_text), UNUSED)

<P><STRONG><a name="[249]"></a>__asm___17_stm32f4xx_lptim_c____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_lptim.o(.rrx_text), UNUSED)

<P><STRONG><a name="[24a]"></a>__asm___16_stm32f4xx_ltdc_c_74c236bc____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(.rrx_text), UNUSED)

<P><STRONG><a name="[24b]"></a>__asm___15_stm32f4xx_pwr_c_0c2a8b75____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.rrx_text), UNUSED)

<P><STRONG><a name="[24c]"></a>__asm___16_stm32f4xx_qspi_c____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_qspi.o(.rrx_text), UNUSED)

<P><STRONG><a name="[24d]"></a>__asm___15_stm32f4xx_rcc_c_49e27980____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.rrx_text), UNUSED)

<P><STRONG><a name="[24e]"></a>__asm___15_stm32f4xx_rng_c____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rng.o(.rrx_text), UNUSED)

<P><STRONG><a name="[24f]"></a>__asm___15_stm32f4xx_rtc_c_81435638____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.rrx_text), UNUSED)

<P><STRONG><a name="[250]"></a>__asm___15_stm32f4xx_sai_c_191626f0____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sai.o(.rrx_text), UNUSED)

<P><STRONG><a name="[251]"></a>__asm___16_stm32f4xx_sdio_c_c8827541____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.rrx_text), UNUSED)

<P><STRONG><a name="[252]"></a>__asm___19_stm32f4xx_spdifrx_c____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spdifrx.o(.rrx_text), UNUSED)

<P><STRONG><a name="[253]"></a>__asm___15_stm32f4xx_spi_c_2b928927____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.rrx_text), UNUSED)

<P><STRONG><a name="[254]"></a>__asm___18_stm32f4xx_syscfg_c_57637610____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.rrx_text), UNUSED)

<P><STRONG><a name="[255]"></a>__asm___15_stm32f4xx_tim_c_c458916b____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.rrx_text), UNUSED)

<P><STRONG><a name="[256]"></a>__asm___17_stm32f4xx_usart_c_9565154b____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.rrx_text), UNUSED)

<P><STRONG><a name="[257]"></a>__asm___16_stm32f4xx_wwdg_c_9668c0ca____RRX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_wwdg.o(.rrx_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Reset_Handler &rArr; mymain &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>myScaterload</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, system.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[f7]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGetID
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexQuery
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexAccept
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxQuery
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
</UL>

<P><STRONG><a name="[f9]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGetID
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexQuery
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexAccept
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxQuery
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
</UL>

<P><STRONG><a name="[14a]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[175]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[11b]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>mySystemInit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[1b7]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[258]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[259]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[69]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[6e]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[71]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>

<P><STRONG><a name="[25a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[25b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[25c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[25d]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_AnalogWatchdogCmd), UNUSED)

<P><STRONG><a name="[25f]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_AnalogWatchdogSingleChannelConfig), UNUSED)

<P><STRONG><a name="[260]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_AnalogWatchdogThresholdsConfig), UNUSED)

<P><STRONG><a name="[261]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_AutoInjectedConvCmd), UNUSED)

<P><STRONG><a name="[262]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_ClearFlag), UNUSED)

<P><STRONG><a name="[263]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_ClearITPendingBit), UNUSED)

<P><STRONG><a name="[264]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_Cmd), UNUSED)

<P><STRONG><a name="[265]"></a>ADC_CommonInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_CommonInit), UNUSED)

<P><STRONG><a name="[266]"></a>ADC_CommonStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_CommonStructInit), UNUSED)

<P><STRONG><a name="[267]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_ContinuousModeCmd), UNUSED)

<P><STRONG><a name="[268]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMACmd), UNUSED)

<P><STRONG><a name="[269]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMARequestAfterLastTransferCmd), UNUSED)

<P><STRONG><a name="[7b]"></a>ADC_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_DeInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[26a]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_DiscModeChannelCountConfig), UNUSED)

<P><STRONG><a name="[26b]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DiscModeCmd), UNUSED)

<P><STRONG><a name="[26c]"></a>ADC_EOCOnEachRegularChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_EOCOnEachRegularChannelCmd), UNUSED)

<P><STRONG><a name="[26d]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_ExternalTrigInjectedConvConfig), UNUSED)

<P><STRONG><a name="[26e]"></a>ADC_ExternalTrigInjectedConvEdgeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_ExternalTrigInjectedConvEdgeConfig), UNUSED)

<P><STRONG><a name="[26f]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_GetConversionValue), UNUSED)

<P><STRONG><a name="[270]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_GetFlagStatus), UNUSED)

<P><STRONG><a name="[271]"></a>ADC_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f4xx_adc.o(i.ADC_GetITStatus), UNUSED)

<P><STRONG><a name="[272]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_GetInjectedConversionValue), UNUSED)

<P><STRONG><a name="[273]"></a>ADC_GetMultiModeConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_GetMultiModeConversionValue), UNUSED)

<P><STRONG><a name="[274]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_GetSoftwareStartConvStatus), UNUSED)

<P><STRONG><a name="[275]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_GetSoftwareStartInjectedConvCmdStatus), UNUSED)

<P><STRONG><a name="[276]"></a>ADC_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_ITConfig), UNUSED)

<P><STRONG><a name="[277]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_adc.o(i.ADC_Init), UNUSED)

<P><STRONG><a name="[278]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f4xx_adc.o(i.ADC_InjectedChannelConfig), UNUSED)

<P><STRONG><a name="[279]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_InjectedDiscModeCmd), UNUSED)

<P><STRONG><a name="[27a]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_InjectedSequencerLengthConfig), UNUSED)

<P><STRONG><a name="[27b]"></a>ADC_MultiModeDMARequestAfterLastTransferCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_MultiModeDMARequestAfterLastTransferCmd), UNUSED)

<P><STRONG><a name="[27c]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig), UNUSED)

<P><STRONG><a name="[27d]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_SetInjectedOffset), UNUSED)

<P><STRONG><a name="[27e]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_SoftwareStartConv), UNUSED)

<P><STRONG><a name="[27f]"></a>ADC_SoftwareStartInjectedConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_SoftwareStartInjectedConv), UNUSED)

<P><STRONG><a name="[280]"></a>ADC_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_StructInit), UNUSED)

<P><STRONG><a name="[281]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_TempSensorVrefintCmd), UNUSED)

<P><STRONG><a name="[282]"></a>ADC_VBATCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_VBATCmd), UNUSED)

<P><STRONG><a name="[7d]"></a>ALL_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, final.o(i.ALL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ALL_Init &rArr; bluetooth_Init &rArr; USART_Config &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DELAY_INIT
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_ALL_ESC
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymain
</UL>

<P><STRONG><a name="[283]"></a>CAN_CancelTransmit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_CancelTransmit), UNUSED)

<P><STRONG><a name="[284]"></a>CAN_ClearFlag</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ClearFlag), UNUSED)

<P><STRONG><a name="[285]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ClearITPendingBit), UNUSED)

<P><STRONG><a name="[286]"></a>CAN_DBGFreeze</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_DBGFreeze), UNUSED)

<P><STRONG><a name="[85]"></a>CAN_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_DeInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[287]"></a>CAN_FIFORelease</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_FIFORelease), UNUSED)

<P><STRONG><a name="[288]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_FilterInit), UNUSED)

<P><STRONG><a name="[289]"></a>CAN_GetFlagStatus</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_GetFlagStatus), UNUSED)

<P><STRONG><a name="[87]"></a>CAN_GetITStatus</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, stm32f4xx_can.o(i.CAN_GetITStatus), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>

<P><STRONG><a name="[28a]"></a>CAN_GetLSBTransmitErrorCounter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_GetLSBTransmitErrorCounter), UNUSED)

<P><STRONG><a name="[28b]"></a>CAN_GetLastErrorCode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_GetLastErrorCode), UNUSED)

<P><STRONG><a name="[28c]"></a>CAN_GetReceiveErrorCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_GetReceiveErrorCounter), UNUSED)

<P><STRONG><a name="[28d]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ITConfig), UNUSED)

<P><STRONG><a name="[28e]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f4xx_can.o(i.CAN_Init), UNUSED)

<P><STRONG><a name="[28f]"></a>CAN_MessagePending</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_MessagePending), UNUSED)

<P><STRONG><a name="[290]"></a>CAN_OperatingModeRequest</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_OperatingModeRequest), UNUSED)

<P><STRONG><a name="[291]"></a>CAN_Receive</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Receive), UNUSED)

<P><STRONG><a name="[292]"></a>CAN_SlaveStartBank</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_SlaveStartBank), UNUSED)

<P><STRONG><a name="[293]"></a>CAN_Sleep</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_Sleep), UNUSED)

<P><STRONG><a name="[294]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_StructInit), UNUSED)

<P><STRONG><a name="[295]"></a>CAN_TTComModeCmd</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_TTComModeCmd), UNUSED)

<P><STRONG><a name="[296]"></a>CAN_Transmit</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Transmit), UNUSED)

<P><STRONG><a name="[297]"></a>CAN_TransmitStatus</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_TransmitStatus), UNUSED)

<P><STRONG><a name="[298]"></a>CAN_WakeUp</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_WakeUp), UNUSED)

<P><STRONG><a name="[299]"></a>CRC_CalcBlockCRC</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_crc.o(i.CRC_CalcBlockCRC), UNUSED)

<P><STRONG><a name="[29a]"></a>CRC_CalcCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_crc.o(i.CRC_CalcCRC), UNUSED)

<P><STRONG><a name="[29b]"></a>CRC_GetCRC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_crc.o(i.CRC_GetCRC), UNUSED)

<P><STRONG><a name="[29c]"></a>CRC_GetIDRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_crc.o(i.CRC_GetIDRegister), UNUSED)

<P><STRONG><a name="[29d]"></a>CRC_ResetDR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_crc.o(i.CRC_ResetDR), UNUSED)

<P><STRONG><a name="[29e]"></a>CRC_SetIDRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_crc.o(i.CRC_SetIDRegister), UNUSED)

<P><STRONG><a name="[89]"></a>CRYP_AES_CBC</STRONG> (Thumb, 540 bytes, Stack size 128 bytes, stm32f4xx_cryp_aes.o(i.CRYP_AES_CBC), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_KeyStructInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_KeyInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_IVInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GetFlagStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GetCmdStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_FIFOFlush
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DataOut
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DataIn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_Cmd
</UL>

<P><STRONG><a name="[94]"></a>CRYP_AES_CCM</STRONG> (Thumb, 1778 bytes, Stack size 184 bytes, stm32f4xx_cryp_aes.o(i.CRYP_AES_CCM), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_PhaseConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_KeyStructInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_KeyInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_IVInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GetFlagStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GetCmdStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_FIFOFlush
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DataOut
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DataIn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_Cmd
</UL>

<P><STRONG><a name="[96]"></a>CRYP_AES_CTR</STRONG> (Thumb, 466 bytes, Stack size 120 bytes, stm32f4xx_cryp_aes.o(i.CRYP_AES_CTR), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_KeyStructInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_KeyInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_IVInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GetFlagStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GetCmdStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_FIFOFlush
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DataOut
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DataIn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_Cmd
</UL>

<P><STRONG><a name="[97]"></a>CRYP_AES_ECB</STRONG> (Thumb, 494 bytes, Stack size 96 bytes, stm32f4xx_cryp_aes.o(i.CRYP_AES_ECB), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_KeyStructInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_KeyInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GetFlagStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GetCmdStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_FIFOFlush
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DataOut
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DataIn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_Cmd
</UL>

<P><STRONG><a name="[98]"></a>CRYP_AES_GCM</STRONG> (Thumb, 1308 bytes, Stack size 144 bytes, stm32f4xx_cryp_aes.o(i.CRYP_AES_GCM), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_PhaseConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_KeyStructInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_KeyInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_IVInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GetFlagStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GetCmdStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_FIFOFlush
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DataOut
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DataIn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_Cmd
</UL>

<P><STRONG><a name="[8e]"></a>CRYP_Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(i.CRYP_Cmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_ECB
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_CBC
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_ECB
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_CBC
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_GCM
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_ECB
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CTR
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CCM
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CBC
</UL>

<P><STRONG><a name="[99]"></a>CRYP_DES_CBC</STRONG> (Thumb, 250 bytes, Stack size 120 bytes, stm32f4xx_cryp_des.o(i.CRYP_DES_CBC), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_KeyStructInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_KeyInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_IVInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GetFlagStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GetCmdStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_FIFOFlush
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DataOut
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DataIn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_Cmd
</UL>

<P><STRONG><a name="[9a]"></a>CRYP_DES_ECB</STRONG> (Thumb, 226 bytes, Stack size 96 bytes, stm32f4xx_cryp_des.o(i.CRYP_DES_ECB), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_KeyStructInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_KeyInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GetFlagStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GetCmdStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_FIFOFlush
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DataOut
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DataIn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_Cmd
</UL>

<P><STRONG><a name="[29f]"></a>CRYP_DMACmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(i.CRYP_DMACmd), UNUSED)

<P><STRONG><a name="[92]"></a>CRYP_DataIn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(i.CRYP_DataIn), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_ECB
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_CBC
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_ECB
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_CBC
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_GCM
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_ECB
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CTR
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CCM
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CBC
</UL>

<P><STRONG><a name="[93]"></a>CRYP_DataOut</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(i.CRYP_DataOut), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_ECB
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_CBC
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_ECB
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_CBC
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_GCM
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_ECB
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CTR
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CCM
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CBC
</UL>

<P><STRONG><a name="[9b]"></a>CRYP_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_cryp.o(i.CRYP_DeInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphResetCmd
</UL>

<P><STRONG><a name="[8b]"></a>CRYP_FIFOFlush</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(i.CRYP_FIFOFlush), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_ECB
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_CBC
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_ECB
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_CBC
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_GCM
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_ECB
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CTR
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CCM
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CBC
</UL>

<P><STRONG><a name="[91]"></a>CRYP_GetCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(i.CRYP_GetCmdStatus), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_ECB
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_CBC
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_ECB
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_CBC
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_GCM
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_ECB
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CTR
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CCM
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CBC
</UL>

<P><STRONG><a name="[8f]"></a>CRYP_GetFlagStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(i.CRYP_GetFlagStatus), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_ECB
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_CBC
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_ECB
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_CBC
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_GCM
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_ECB
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CTR
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CCM
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CBC
</UL>

<P><STRONG><a name="[2a0]"></a>CRYP_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(i.CRYP_GetITStatus), UNUSED)

<P><STRONG><a name="[2a1]"></a>CRYP_ITConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(i.CRYP_ITConfig), UNUSED)

<P><STRONG><a name="[90]"></a>CRYP_IVInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(i.CRYP_IVInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_CBC
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_CBC
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_GCM
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CTR
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CCM
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CBC
</UL>

<P><STRONG><a name="[2a2]"></a>CRYP_IVStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(i.CRYP_IVStructInit), UNUSED)

<P><STRONG><a name="[8c]"></a>CRYP_Init</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(i.CRYP_Init), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_ECB
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_CBC
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_ECB
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_CBC
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_GCM
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_ECB
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CTR
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CCM
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CBC
</UL>

<P><STRONG><a name="[8d]"></a>CRYP_KeyInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(i.CRYP_KeyInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_ECB
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_CBC
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_ECB
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_CBC
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_GCM
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_ECB
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CTR
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CCM
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CBC
</UL>

<P><STRONG><a name="[8a]"></a>CRYP_KeyStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(i.CRYP_KeyStructInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_ECB
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_TDES_CBC
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_ECB
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DES_CBC
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_GCM
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_ECB
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CTR
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CCM
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CBC
</UL>

<P><STRONG><a name="[95]"></a>CRYP_PhaseConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(i.CRYP_PhaseConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_GCM
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_AES_CCM
</UL>

<P><STRONG><a name="[2a3]"></a>CRYP_RestoreContext</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(i.CRYP_RestoreContext), UNUSED)

<P><STRONG><a name="[2a4]"></a>CRYP_SaveContext</STRONG> (Thumb, 256 bytes, Stack size 20 bytes, stm32f4xx_cryp.o(i.CRYP_SaveContext), UNUSED)

<P><STRONG><a name="[2a5]"></a>CRYP_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_cryp.o(i.CRYP_StructInit), UNUSED)

<P><STRONG><a name="[9d]"></a>CRYP_TDES_CBC</STRONG> (Thumb, 282 bytes, Stack size 120 bytes, stm32f4xx_cryp_tdes.o(i.CRYP_TDES_CBC), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_KeyStructInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_KeyInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_IVInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GetFlagStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GetCmdStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_FIFOFlush
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DataOut
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DataIn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_Cmd
</UL>

<P><STRONG><a name="[9e]"></a>CRYP_TDES_ECB</STRONG> (Thumb, 258 bytes, Stack size 96 bytes, stm32f4xx_cryp_tdes.o(i.CRYP_TDES_ECB), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_KeyStructInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_KeyInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GetFlagStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_GetCmdStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_FIFOFlush
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DataOut
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DataIn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_Cmd
</UL>

<P><STRONG><a name="[2a6]"></a>DAC_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_dac.o(i.DAC_ClearFlag), UNUSED)

<P><STRONG><a name="[2a7]"></a>DAC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_dac.o(i.DAC_ClearITPendingBit), UNUSED)

<P><STRONG><a name="[2a8]"></a>DAC_Cmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dac.o(i.DAC_Cmd), UNUSED)

<P><STRONG><a name="[2a9]"></a>DAC_DMACmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dac.o(i.DAC_DMACmd), UNUSED)

<P><STRONG><a name="[9f]"></a>DAC_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_dac.o(i.DAC_DeInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[2aa]"></a>DAC_DualSoftwareTriggerCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dac.o(i.DAC_DualSoftwareTriggerCmd), UNUSED)

<P><STRONG><a name="[2ab]"></a>DAC_GetDataOutputValue</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_dac.o(i.DAC_GetDataOutputValue), UNUSED)

<P><STRONG><a name="[2ac]"></a>DAC_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_dac.o(i.DAC_GetFlagStatus), UNUSED)

<P><STRONG><a name="[2ad]"></a>DAC_GetITStatus</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_dac.o(i.DAC_GetITStatus), UNUSED)

<P><STRONG><a name="[2ae]"></a>DAC_ITConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_dac.o(i.DAC_ITConfig), UNUSED)

<P><STRONG><a name="[2af]"></a>DAC_Init</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f4xx_dac.o(i.DAC_Init), UNUSED)

<P><STRONG><a name="[2b0]"></a>DAC_SetChannel1Data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_dac.o(i.DAC_SetChannel1Data), UNUSED)

<P><STRONG><a name="[2b1]"></a>DAC_SetChannel2Data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_dac.o(i.DAC_SetChannel2Data), UNUSED)

<P><STRONG><a name="[2b2]"></a>DAC_SetDualChannelData</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f4xx_dac.o(i.DAC_SetDualChannelData), UNUSED)

<P><STRONG><a name="[2b3]"></a>DAC_SoftwareTriggerCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_dac.o(i.DAC_SoftwareTriggerCmd), UNUSED)

<P><STRONG><a name="[2b4]"></a>DAC_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_dac.o(i.DAC_StructInit), UNUSED)

<P><STRONG><a name="[2b5]"></a>DAC_WaveGenerationCmd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_dac.o(i.DAC_WaveGenerationCmd), UNUSED)

<P><STRONG><a name="[2b6]"></a>DBGMCU_APB1PeriphConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dbgmcu.o(i.DBGMCU_APB1PeriphConfig), UNUSED)

<P><STRONG><a name="[2b7]"></a>DBGMCU_APB2PeriphConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dbgmcu.o(i.DBGMCU_APB2PeriphConfig), UNUSED)

<P><STRONG><a name="[2b8]"></a>DBGMCU_Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dbgmcu.o(i.DBGMCU_Config), UNUSED)

<P><STRONG><a name="[2b9]"></a>DBGMCU_GetDEVID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_dbgmcu.o(i.DBGMCU_GetDEVID), UNUSED)

<P><STRONG><a name="[2ba]"></a>DBGMCU_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_dbgmcu.o(i.DBGMCU_GetREVID), UNUSED)

<P><STRONG><a name="[2bb]"></a>DCMI_CROPCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_CROPCmd), UNUSED)

<P><STRONG><a name="[2bc]"></a>DCMI_CROPConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_CROPConfig), UNUSED)

<P><STRONG><a name="[2bd]"></a>DCMI_CaptureCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_CaptureCmd), UNUSED)

<P><STRONG><a name="[2be]"></a>DCMI_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_ClearFlag), UNUSED)

<P><STRONG><a name="[2bf]"></a>DCMI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_ClearITPendingBit), UNUSED)

<P><STRONG><a name="[2c0]"></a>DCMI_Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_Cmd), UNUSED)

<P><STRONG><a name="[2c1]"></a>DCMI_DeInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_DeInit), UNUSED)

<P><STRONG><a name="[2c2]"></a>DCMI_GetFlagStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_dcmi.o(i.DCMI_GetFlagStatus), UNUSED)

<P><STRONG><a name="[2c3]"></a>DCMI_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_GetITStatus), UNUSED)

<P><STRONG><a name="[2c4]"></a>DCMI_ITConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_ITConfig), UNUSED)

<P><STRONG><a name="[2c5]"></a>DCMI_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_Init), UNUSED)

<P><STRONG><a name="[2c6]"></a>DCMI_JPEGCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_JPEGCmd), UNUSED)

<P><STRONG><a name="[2c7]"></a>DCMI_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_ReadData), UNUSED)

<P><STRONG><a name="[2c8]"></a>DCMI_SetEmbeddedSynchroCodes</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_SetEmbeddedSynchroCodes), UNUSED)

<P><STRONG><a name="[2c9]"></a>DCMI_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_StructInit), UNUSED)

<P><STRONG><a name="[2ca]"></a>DMA2D_AbortTransfer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(i.DMA2D_AbortTransfer), UNUSED)

<P><STRONG><a name="[2cb]"></a>DMA2D_BGConfig</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, stm32f4xx_dma2d.o(i.DMA2D_BGConfig), UNUSED)

<P><STRONG><a name="[2cc]"></a>DMA2D_BGStart</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(i.DMA2D_BGStart), UNUSED)

<P><STRONG><a name="[2cd]"></a>DMA2D_BG_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(i.DMA2D_BG_StructInit), UNUSED)

<P><STRONG><a name="[2ce]"></a>DMA2D_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(i.DMA2D_ClearFlag), UNUSED)

<P><STRONG><a name="[2cf]"></a>DMA2D_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(i.DMA2D_ClearITPendingBit), UNUSED)

<P><STRONG><a name="[a0]"></a>DMA2D_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_dma2d.o(i.DMA2D_DeInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[2d0]"></a>DMA2D_DeadTimeConfig</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_dma2d.o(i.DMA2D_DeadTimeConfig), UNUSED)

<P><STRONG><a name="[2d1]"></a>DMA2D_FGConfig</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, stm32f4xx_dma2d.o(i.DMA2D_FGConfig), UNUSED)

<P><STRONG><a name="[2d2]"></a>DMA2D_FGStart</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(i.DMA2D_FGStart), UNUSED)

<P><STRONG><a name="[2d3]"></a>DMA2D_FG_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(i.DMA2D_FG_StructInit), UNUSED)

<P><STRONG><a name="[2d4]"></a>DMA2D_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(i.DMA2D_GetFlagStatus), UNUSED)

<P><STRONG><a name="[2d5]"></a>DMA2D_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(i.DMA2D_GetITStatus), UNUSED)

<P><STRONG><a name="[2d6]"></a>DMA2D_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(i.DMA2D_ITConfig), UNUSED)

<P><STRONG><a name="[2d7]"></a>DMA2D_Init</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, stm32f4xx_dma2d.o(i.DMA2D_Init), UNUSED)

<P><STRONG><a name="[2d8]"></a>DMA2D_LineWatermarkConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(i.DMA2D_LineWatermarkConfig), UNUSED)

<P><STRONG><a name="[2d9]"></a>DMA2D_StartTransfer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(i.DMA2D_StartTransfer), UNUSED)

<P><STRONG><a name="[2da]"></a>DMA2D_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(i.DMA2D_StructInit), UNUSED)

<P><STRONG><a name="[2db]"></a>DMA2D_Suspend</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(i.DMA2D_Suspend), UNUSED)

<P><STRONG><a name="[2dc]"></a>DMA_ClearFlag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag), UNUSED)

<P><STRONG><a name="[2dd]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearITPendingBit), UNUSED)

<P><STRONG><a name="[2de]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd), UNUSED)

<P><STRONG><a name="[2df]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DeInit), UNUSED)

<P><STRONG><a name="[2e0]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DoubleBufferModeCmd), UNUSED)

<P><STRONG><a name="[2e1]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DoubleBufferModeConfig), UNUSED)

<P><STRONG><a name="[2e2]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_FlowControllerConfig), UNUSED)

<P><STRONG><a name="[2e3]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCmdStatus), UNUSED)

<P><STRONG><a name="[2e4]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCurrDataCounter), UNUSED)

<P><STRONG><a name="[2e5]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCurrentMemoryTarget), UNUSED)

<P><STRONG><a name="[2e6]"></a>DMA_GetFIFOStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetFIFOStatus), UNUSED)

<P><STRONG><a name="[2e7]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_GetFlagStatus), UNUSED)

<P><STRONG><a name="[2e8]"></a>DMA_GetITStatus</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_GetITStatus), UNUSED)

<P><STRONG><a name="[2e9]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_ITConfig), UNUSED)

<P><STRONG><a name="[2ea]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_Init), UNUSED)

<P><STRONG><a name="[2eb]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_MemoryTargetConfig), UNUSED)

<P><STRONG><a name="[2ec]"></a>DMA_PeriphIncOffsetSizeConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_PeriphIncOffsetSizeConfig), UNUSED)

<P><STRONG><a name="[2ed]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_SetCurrDataCounter), UNUSED)

<P><STRONG><a name="[2ee]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_StructInit), UNUSED)

<P><STRONG><a name="[a2]"></a>Delay_ms</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, delay.o(i.Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_s
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_ReadTempPress
</UL>

<P><STRONG><a name="[a4]"></a>Delay_s</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, delay.o(i.Delay_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Delay_s &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_ALL_ESC
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_ESC
</UL>

<P><STRONG><a name="[a3]"></a>Delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, delay.o(i.Delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_W
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_R
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_W
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_W_SDA
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_W_SCL
</UL>

<P><STRONG><a name="[2ef]"></a>EXTI_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearFlag), UNUSED)

<P><STRONG><a name="[2f0]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit), UNUSED)

<P><STRONG><a name="[2f1]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_DeInit), UNUSED)

<P><STRONG><a name="[2f2]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GenerateSWInterrupt), UNUSED)

<P><STRONG><a name="[2f3]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GetFlagStatus), UNUSED)

<P><STRONG><a name="[2f4]"></a>EXTI_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GetITStatus), UNUSED)

<P><STRONG><a name="[2f5]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_Init), UNUSED)

<P><STRONG><a name="[2f6]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_StructInit), UNUSED)

<P><STRONG><a name="[2f7]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_ClearFlag), UNUSED)

<P><STRONG><a name="[2f8]"></a>FLASH_DataCacheCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_DataCacheCmd), UNUSED)

<P><STRONG><a name="[2f9]"></a>FLASH_DataCacheReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_DataCacheReset), UNUSED)

<P><STRONG><a name="[a5]"></a>FLASH_EraseAllBank1Sectors</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_flash.o(i.FLASH_EraseAllBank1Sectors), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[a7]"></a>FLASH_EraseAllBank2Sectors</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_flash.o(i.FLASH_EraseAllBank2Sectors), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[a8]"></a>FLASH_EraseAllSectors</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_flash.o(i.FLASH_EraseAllSectors), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[a9]"></a>FLASH_EraseSector</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f4xx_flash.o(i.FLASH_EraseSector), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2fa]"></a>FLASH_FlashInterfaceCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_flash_ramfunc.o(i.FLASH_FlashInterfaceCmd), UNUSED)

<P><STRONG><a name="[2fb]"></a>FLASH_FlashSleepModeCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_flash_ramfunc.o(i.FLASH_FlashSleepModeCmd), UNUSED)

<P><STRONG><a name="[2fc]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_GetFlagStatus), UNUSED)

<P><STRONG><a name="[b5]"></a>FLASH_GetStatus</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_GetStatus), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2fd]"></a>FLASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_ITConfig), UNUSED)

<P><STRONG><a name="[2fe]"></a>FLASH_InstructionCacheCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_InstructionCacheCmd), UNUSED)

<P><STRONG><a name="[2ff]"></a>FLASH_InstructionCacheReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_InstructionCacheReset), UNUSED)

<P><STRONG><a name="[300]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_Lock), UNUSED)

<P><STRONG><a name="[301]"></a>FLASH_OB_BORConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_OB_BORConfig), UNUSED)

<P><STRONG><a name="[302]"></a>FLASH_OB_BootConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_OB_BootConfig), UNUSED)

<P><STRONG><a name="[303]"></a>FLASH_OB_GetBOR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_OB_GetBOR), UNUSED)

<P><STRONG><a name="[304]"></a>FLASH_OB_GetPCROP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_OB_GetPCROP), UNUSED)

<P><STRONG><a name="[305]"></a>FLASH_OB_GetPCROP1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_OB_GetPCROP1), UNUSED)

<P><STRONG><a name="[306]"></a>FLASH_OB_GetRDP</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_OB_GetRDP), UNUSED)

<P><STRONG><a name="[307]"></a>FLASH_OB_GetUser</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_OB_GetUser), UNUSED)

<P><STRONG><a name="[308]"></a>FLASH_OB_GetWRP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_OB_GetWRP), UNUSED)

<P><STRONG><a name="[309]"></a>FLASH_OB_GetWRP1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_OB_GetWRP1), UNUSED)

<P><STRONG><a name="[aa]"></a>FLASH_OB_Launch</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f4xx_flash.o(i.FLASH_OB_Launch), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[30a]"></a>FLASH_OB_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_OB_Lock), UNUSED)

<P><STRONG><a name="[ab]"></a>FLASH_OB_PCROP1Config</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f4xx_flash.o(i.FLASH_OB_PCROP1Config), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[ac]"></a>FLASH_OB_PCROPConfig</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f4xx_flash.o(i.FLASH_OB_PCROPConfig), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[30b]"></a>FLASH_OB_PCROPSelectionConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_OB_PCROPSelectionConfig), UNUSED)

<P><STRONG><a name="[ad]"></a>FLASH_OB_RDPConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_flash.o(i.FLASH_OB_RDPConfig), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[30c]"></a>FLASH_OB_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_OB_Unlock), UNUSED)

<P><STRONG><a name="[ae]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, stm32f4xx_flash.o(i.FLASH_OB_UserConfig), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[af]"></a>FLASH_OB_WRP1Config</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f4xx_flash.o(i.FLASH_OB_WRP1Config), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[b0]"></a>FLASH_OB_WRPConfig</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f4xx_flash.o(i.FLASH_OB_WRPConfig), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[30d]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_PrefetchBufferCmd), UNUSED)

<P><STRONG><a name="[b1]"></a>FLASH_ProgramByte</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f4xx_flash.o(i.FLASH_ProgramByte), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[b2]"></a>FLASH_ProgramDoubleWord</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_flash.o(i.FLASH_ProgramDoubleWord), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[b3]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_flash.o(i.FLASH_ProgramHalfWord), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[b4]"></a>FLASH_ProgramWord</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_flash.o(i.FLASH_ProgramWord), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[30e]"></a>FLASH_SetLatency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_SetLatency), UNUSED)

<P><STRONG><a name="[30f]"></a>FLASH_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_Unlock), UNUSED)

<P><STRONG><a name="[a6]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_flash.o(i.FLASH_WaitForLastOperation), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramDoubleWord
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRPConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRP1Config
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_PCROPConfig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_PCROP1Config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Launch
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllSectors
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllBank2Sectors
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllBank1Sectors
</UL>

<P><STRONG><a name="[b6]"></a>GPIO_DeInit</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_DeInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[b9]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_GPIO_Config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
</UL>

<P><STRONG><a name="[17d]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
</UL>

<P><STRONG><a name="[310]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinLockConfig), UNUSED)

<P><STRONG><a name="[311]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputData), UNUSED)

<P><STRONG><a name="[19d]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_R
</UL>

<P><STRONG><a name="[312]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadOutputData), UNUSED)

<P><STRONG><a name="[313]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadOutputDataBit), UNUSED)

<P><STRONG><a name="[314]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits), UNUSED)

<P><STRONG><a name="[ba]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_GPIO_Config
</UL>

<P><STRONG><a name="[315]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_StructInit), UNUSED)

<P><STRONG><a name="[316]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ToggleBits), UNUSED)

<P><STRONG><a name="[317]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_Write), UNUSED)

<P><STRONG><a name="[f5]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_W
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_W
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_W_SDA
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_W_SCL
</UL>

<P><STRONG><a name="[b7]"></a>GY86_GPIO_Config</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gy86.o(i.GY86_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GY86_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_Init
</UL>

<P><STRONG><a name="[81]"></a>GY86_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gy86.o(i.GY86_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GY86_Init &rArr; MPU6050_Init &rArr; GY86_WriteReg &rArr; MyI2C_SendByte &rArr; SDA_W
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883L_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>

<P><STRONG><a name="[bd]"></a>GY86_MS5611_SendCMD</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gy86.o(i.GY86_MS5611_SendCMD), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Stop
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendByte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveAck
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Reset
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_ReadTempPress
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_ReadProm
</UL>

<P><STRONG><a name="[c2]"></a>GY86_ReadReg</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gy86.o(i.GY86_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GY86_ReadReg &rArr; MyI2C_SendByte &rArr; SDA_W
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Stop
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendByte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendAck
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveByte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveAck
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_GetData
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883L_GetData
</UL>

<P><STRONG><a name="[c5]"></a>GY86_Show</STRONG> (Thumb, 354 bytes, Stack size 88 bytes, final.o(i.GY86_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GY86_Show &rArr; OLED_ShowSignedNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte &rArr; OLED_W_SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowSignedNum
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_GetData
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883L_GetData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendByte
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Display
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[cc]"></a>GY86_WriteReg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gy86.o(i.GY86_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GY86_WriteReg &rArr; MyI2C_SendByte &rArr; SDA_W
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Stop
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendByte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveAck
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883L_Init
</UL>

<P><STRONG><a name="[318]"></a>HASH_AutoStartDigest</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hash.o(i.HASH_AutoStartDigest), UNUSED)

<P><STRONG><a name="[319]"></a>HASH_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hash.o(i.HASH_ClearFlag), UNUSED)

<P><STRONG><a name="[31a]"></a>HASH_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hash.o(i.HASH_ClearITPendingBit), UNUSED)

<P><STRONG><a name="[31b]"></a>HASH_DMACmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hash.o(i.HASH_DMACmd), UNUSED)

<P><STRONG><a name="[d1]"></a>HASH_DataIn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hash.o(i.HASH_DataIn), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_SHA1
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_SHA1
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_MD5
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_MD5
</UL>

<P><STRONG><a name="[cd]"></a>HASH_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hash.o(i.HASH_DeInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_SHA1
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_SHA1
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_MD5
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_MD5
</UL>

<P><STRONG><a name="[d4]"></a>HASH_GetDigest</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_hash.o(i.HASH_GetDigest), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_SHA1
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_SHA1
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_MD5
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_MD5
</UL>

<P><STRONG><a name="[d3]"></a>HASH_GetFlagStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hash.o(i.HASH_GetFlagStatus), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_SHA1
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_SHA1
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_MD5
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_MD5
</UL>

<P><STRONG><a name="[31c]"></a>HASH_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hash.o(i.HASH_GetITStatus), UNUSED)

<P><STRONG><a name="[31d]"></a>HASH_GetInFIFOWordsNbr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hash.o(i.HASH_GetInFIFOWordsNbr), UNUSED)

<P><STRONG><a name="[31e]"></a>HASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hash.o(i.HASH_ITConfig), UNUSED)

<P><STRONG><a name="[cf]"></a>HASH_Init</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f4xx_hash.o(i.HASH_Init), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_SHA1
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_SHA1
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_MD5
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_MD5
</UL>

<P><STRONG><a name="[ce]"></a>HASH_MD5</STRONG> (Thumb, 180 bytes, Stack size 96 bytes, stm32f4xx_hash_md5.o(i.HASH_MD5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_StartDigest
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_SetLastWordValidBitsNbr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_GetFlagStatus
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_GetDigest
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_DeInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_DataIn
</UL>

<P><STRONG><a name="[31f]"></a>HASH_Reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hash.o(i.HASH_Reset), UNUSED)

<P><STRONG><a name="[320]"></a>HASH_RestoreContext</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f4xx_hash.o(i.HASH_RestoreContext), UNUSED)

<P><STRONG><a name="[d5]"></a>HASH_SHA1</STRONG> (Thumb, 186 bytes, Stack size 96 bytes, stm32f4xx_hash_sha1.o(i.HASH_SHA1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_StartDigest
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_SetLastWordValidBitsNbr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_GetFlagStatus
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_GetDigest
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_DeInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_DataIn
</UL>

<P><STRONG><a name="[321]"></a>HASH_SaveContext</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hash.o(i.HASH_SaveContext), UNUSED)

<P><STRONG><a name="[d0]"></a>HASH_SetLastWordValidBitsNbr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hash.o(i.HASH_SetLastWordValidBitsNbr), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_SHA1
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_SHA1
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_MD5
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_MD5
</UL>

<P><STRONG><a name="[d2]"></a>HASH_StartDigest</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hash.o(i.HASH_StartDigest), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_SHA1
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_SHA1
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_MD5
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_MD5
</UL>

<P><STRONG><a name="[322]"></a>HASH_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hash.o(i.HASH_StructInit), UNUSED)

<P><STRONG><a name="[d6]"></a>HMAC_MD5</STRONG> (Thumb, 354 bytes, Stack size 104 bytes, stm32f4xx_hash_md5.o(i.HMAC_MD5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_StartDigest
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_SetLastWordValidBitsNbr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_GetFlagStatus
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_GetDigest
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_DeInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_DataIn
</UL>

<P><STRONG><a name="[d7]"></a>HMAC_SHA1</STRONG> (Thumb, 362 bytes, Stack size 104 bytes, stm32f4xx_hash_sha1.o(i.HMAC_SHA1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_StartDigest
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_SetLastWordValidBitsNbr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_GetFlagStatus
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_GetDigest
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_DeInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_DataIn
</UL>

<P><STRONG><a name="[c7]"></a>HMC5883L_GetData</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gy86.o(i.HMC5883L_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HMC5883L_GetData &rArr; GY86_ReadReg &rArr; MyI2C_SendByte &rArr; SDA_W
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_Show
</UL>

<P><STRONG><a name="[bc]"></a>HMC5883L_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gy86.o(i.HMC5883L_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HMC5883L_Init &rArr; GY86_WriteReg &rArr; MyI2C_SendByte &rArr; SDA_W
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_Init
</UL>

<P><STRONG><a name="[323]"></a>I2C_ARPCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_ARPCmd), UNUSED)

<P><STRONG><a name="[324]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_AcknowledgeConfig), UNUSED)

<P><STRONG><a name="[325]"></a>I2C_AnalogFilterCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_AnalogFilterCmd), UNUSED)

<P><STRONG><a name="[326]"></a>I2C_CalculatePEC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_CalculatePEC), UNUSED)

<P><STRONG><a name="[327]"></a>I2C_CheckEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(i.I2C_CheckEvent), UNUSED)

<P><STRONG><a name="[328]"></a>I2C_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_ClearFlag), UNUSED)

<P><STRONG><a name="[329]"></a>I2C_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_ClearITPendingBit), UNUSED)

<P><STRONG><a name="[32a]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_Cmd), UNUSED)

<P><STRONG><a name="[32b]"></a>I2C_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_DMACmd), UNUSED)

<P><STRONG><a name="[32c]"></a>I2C_DMALastTransferCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_DMALastTransferCmd), UNUSED)

<P><STRONG><a name="[d8]"></a>I2C_DeInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(i.I2C_DeInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[32d]"></a>I2C_DigitalFilterConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_DigitalFilterConfig), UNUSED)

<P><STRONG><a name="[32e]"></a>I2C_DualAddressCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_DualAddressCmd), UNUSED)

<P><STRONG><a name="[32f]"></a>I2C_FastModeDutyCycleConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_FastModeDutyCycleConfig), UNUSED)

<P><STRONG><a name="[330]"></a>I2C_GeneralCallCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_GeneralCallCmd), UNUSED)

<P><STRONG><a name="[331]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_GenerateSTART), UNUSED)

<P><STRONG><a name="[332]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_GenerateSTOP), UNUSED)

<P><STRONG><a name="[333]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f4xx_i2c.o(i.I2C_GetFlagStatus), UNUSED)

<P><STRONG><a name="[334]"></a>I2C_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f4xx_i2c.o(i.I2C_GetITStatus), UNUSED)

<P><STRONG><a name="[335]"></a>I2C_GetLastEvent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(i.I2C_GetLastEvent), UNUSED)

<P><STRONG><a name="[336]"></a>I2C_GetPEC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_GetPEC), UNUSED)

<P><STRONG><a name="[337]"></a>I2C_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_ITConfig), UNUSED)

<P><STRONG><a name="[d9]"></a>I2C_Init</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, stm32f4xx_i2c.o(i.I2C_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[338]"></a>I2C_NACKPositionConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_NACKPositionConfig), UNUSED)

<P><STRONG><a name="[339]"></a>I2C_OwnAddress2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_OwnAddress2Config), UNUSED)

<P><STRONG><a name="[33a]"></a>I2C_PECPositionConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_PECPositionConfig), UNUSED)

<P><STRONG><a name="[33b]"></a>I2C_ReadRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(i.I2C_ReadRegister), UNUSED)

<P><STRONG><a name="[33c]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_ReceiveData), UNUSED)

<P><STRONG><a name="[33d]"></a>I2C_SMBusAlertConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_SMBusAlertConfig), UNUSED)

<P><STRONG><a name="[33e]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_Send7bitAddress), UNUSED)

<P><STRONG><a name="[33f]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_SendData), UNUSED)

<P><STRONG><a name="[340]"></a>I2C_SoftwareResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_SoftwareResetCmd), UNUSED)

<P><STRONG><a name="[341]"></a>I2C_StretchClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_StretchClockCmd), UNUSED)

<P><STRONG><a name="[342]"></a>I2C_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_StructInit), UNUSED)

<P><STRONG><a name="[343]"></a>I2C_TransmitPEC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_TransmitPEC), UNUSED)

<P><STRONG><a name="[344]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.I2S_Cmd), UNUSED)

<P><STRONG><a name="[345]"></a>I2S_FullDuplexConfig</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_spi.o(i.I2S_FullDuplexConfig), UNUSED)

<P><STRONG><a name="[346]"></a>I2S_Init</STRONG> (Thumb, 396 bytes, Stack size 36 bytes, stm32f4xx_spi.o(i.I2S_Init), UNUSED)

<P><STRONG><a name="[347]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.I2S_StructInit), UNUSED)

<P><STRONG><a name="[348]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_Enable), UNUSED)

<P><STRONG><a name="[349]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_GetFlagStatus), UNUSED)

<P><STRONG><a name="[34a]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_ReloadCounter), UNUSED)

<P><STRONG><a name="[34b]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_SetPrescaler), UNUSED)

<P><STRONG><a name="[34c]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_SetReload), UNUSED)

<P><STRONG><a name="[34d]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_WriteAccessCmd), UNUSED)

<P><STRONG><a name="[34e]"></a>LTDC_CLUTCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_CLUTCmd), UNUSED)

<P><STRONG><a name="[34f]"></a>LTDC_CLUTInit</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f4xx_ltdc.o(i.LTDC_CLUTInit), UNUSED)

<P><STRONG><a name="[350]"></a>LTDC_CLUTStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_CLUTStructInit), UNUSED)

<P><STRONG><a name="[351]"></a>LTDC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_ClearFlag), UNUSED)

<P><STRONG><a name="[352]"></a>LTDC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_ClearITPendingBit), UNUSED)

<P><STRONG><a name="[353]"></a>LTDC_Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_Cmd), UNUSED)

<P><STRONG><a name="[354]"></a>LTDC_ColorKeyingConfig</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_ltdc.o(i.LTDC_ColorKeyingConfig), UNUSED)

<P><STRONG><a name="[355]"></a>LTDC_ColorKeyingStructInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_ColorKeyingStructInit), UNUSED)

<P><STRONG><a name="[db]"></a>LTDC_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_ltdc.o(i.LTDC_DeInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[356]"></a>LTDC_DitherCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_DitherCmd), UNUSED)

<P><STRONG><a name="[357]"></a>LTDC_GetCDStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_GetCDStatus), UNUSED)

<P><STRONG><a name="[358]"></a>LTDC_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_GetFlagStatus), UNUSED)

<P><STRONG><a name="[359]"></a>LTDC_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_GetITStatus), UNUSED)

<P><STRONG><a name="[35a]"></a>LTDC_GetPosStatus</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f4xx_ltdc.o(i.LTDC_GetPosStatus), UNUSED)

<P><STRONG><a name="[35b]"></a>LTDC_GetRGBWidth</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_ltdc.o(i.LTDC_GetRGBWidth), UNUSED)

<P><STRONG><a name="[35c]"></a>LTDC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_ITConfig), UNUSED)

<P><STRONG><a name="[35d]"></a>LTDC_Init</STRONG> (Thumb, 378 bytes, Stack size 20 bytes, stm32f4xx_ltdc.o(i.LTDC_Init), UNUSED)

<P><STRONG><a name="[35e]"></a>LTDC_LIPConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_LIPConfig), UNUSED)

<P><STRONG><a name="[35f]"></a>LTDC_LayerAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_LayerAddress), UNUSED)

<P><STRONG><a name="[360]"></a>LTDC_LayerAlpha</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_LayerAlpha), UNUSED)

<P><STRONG><a name="[361]"></a>LTDC_LayerCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_LayerCmd), UNUSED)

<P><STRONG><a name="[362]"></a>LTDC_LayerInit</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, stm32f4xx_ltdc.o(i.LTDC_LayerInit), UNUSED)

<P><STRONG><a name="[363]"></a>LTDC_LayerPixelFormat</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, stm32f4xx_ltdc.o(i.LTDC_LayerPixelFormat), UNUSED)

<P><STRONG><a name="[364]"></a>LTDC_LayerPosition</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, stm32f4xx_ltdc.o(i.LTDC_LayerPosition), UNUSED)

<P><STRONG><a name="[365]"></a>LTDC_LayerSize</STRONG> (Thumb, 116 bytes, Stack size 28 bytes, stm32f4xx_ltdc.o(i.LTDC_LayerSize), UNUSED)

<P><STRONG><a name="[366]"></a>LTDC_LayerStructInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_LayerStructInit), UNUSED)

<P><STRONG><a name="[367]"></a>LTDC_PosStructInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_PosStructInit), UNUSED)

<P><STRONG><a name="[368]"></a>LTDC_RGBStructInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_RGBStructInit), UNUSED)

<P><STRONG><a name="[369]"></a>LTDC_ReloadConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_ReloadConfig), UNUSED)

<P><STRONG><a name="[36a]"></a>LTDC_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_StructInit), UNUSED)

<P><STRONG><a name="[dc]"></a>MOTOR_GPIO_Config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, motor.o(i.MOTOR_GPIO_Config))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_Init
</UL>

<P><STRONG><a name="[7e]"></a>MOTOR_Init</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, motor.o(i.MOTOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MOTOR_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>

<P><STRONG><a name="[de]"></a>MOTOR_SetSpeed</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, motor.o(i.MOTOR_SetSpeed), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetCompare
</UL>

<P><STRONG><a name="[c6]"></a>MPU6050_GetData</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, gy86.o(i.MPU6050_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU6050_GetData &rArr; GY86_ReadReg &rArr; MyI2C_SendByte &rArr; SDA_W
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_Show
</UL>

<P><STRONG><a name="[bb]"></a>MPU6050_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gy86.o(i.MPU6050_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MPU6050_Init &rArr; GY86_WriteReg &rArr; MyI2C_SendByte &rArr; SDA_W
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_Init
</UL>

<P><STRONG><a name="[36b]"></a>MS5611_Calculate</STRONG> (Thumb, 278 bytes, Stack size 64 bytes, gy86.o(i.MS5611_Calculate), UNUSED)

<P><STRONG><a name="[e0]"></a>MS5611_ReadProm</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, gy86.o(i.MS5611_ReadProm), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendByte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendAck
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveByte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveAck
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_MS5611_SendCMD
</UL>

<P><STRONG><a name="[e1]"></a>MS5611_ReadTempPress</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gy86.o(i.MS5611_ReadTempPress), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendByte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendAck
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveByte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveAck
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_MS5611_SendCMD
</UL>

<P><STRONG><a name="[e2]"></a>MS5611_Reset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gy86.o(i.MS5611_Reset), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_MS5611_SendCMD
</UL>

<P><STRONG><a name="[c0]"></a>MyI2C_ReceiveAck</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gy86.o(i.MyI2C_ReceiveAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MyI2C_ReceiveAck &rArr; SDA_W
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_W
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_R
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_W
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_ReadTempPress
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_ReadProm
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_WriteReg
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_ReadReg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_MS5611_SendCMD
</UL>

<P><STRONG><a name="[c3]"></a>MyI2C_ReceiveByte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gy86.o(i.MyI2C_ReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MyI2C_ReceiveByte &rArr; SDA_W
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_W
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_R
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_W
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_ReadTempPress
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_ReadProm
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_ReadReg
</UL>

<P><STRONG><a name="[c4]"></a>MyI2C_SendAck</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gy86.o(i.MyI2C_SendAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MyI2C_SendAck &rArr; SDA_W
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_W
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_W
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_ReadTempPress
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_ReadProm
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_ReadReg
</UL>

<P><STRONG><a name="[bf]"></a>MyI2C_SendByte</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gy86.o(i.MyI2C_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MyI2C_SendByte &rArr; SDA_W
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_W
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_W
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_ReadTempPress
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_ReadProm
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_WriteReg
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_ReadReg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_MS5611_SendCMD
</UL>

<P><STRONG><a name="[be]"></a>MyI2C_Start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gy86.o(i.MyI2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MyI2C_Start &rArr; SDA_W
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_W
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_W
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_ReadTempPress
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_ReadProm
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_WriteReg
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_ReadReg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_MS5611_SendCMD
</UL>

<P><STRONG><a name="[c1]"></a>MyI2C_Stop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gy86.o(i.MyI2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MyI2C_Stop &rArr; SDA_W
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_W
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_W
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_WriteReg
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_ReadReg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_MS5611_SendCMD
</UL>

<P><STRONG><a name="[184]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
</UL>

<P><STRONG><a name="[183]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
</UL>

<P><STRONG><a name="[36c]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable), UNUSED)

<P><STRONG><a name="[36d]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, misc.o(i.NVIC_SystemLPConfig), UNUSED)

<P><STRONG><a name="[e6]"></a>OLED_Clear</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Clear &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte &rArr; OLED_W_SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[e9]"></a>OLED_I2C_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, oled.o(i.OLED_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OLED_I2C_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_W_SDA
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_W_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[ec]"></a>OLED_I2C_SendByte</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, oled.o(i.OLED_I2C_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_I2C_SendByte &rArr; OLED_W_SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_W_SDA
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_W_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>

<P><STRONG><a name="[ed]"></a>OLED_I2C_Start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, oled.o(i.OLED_I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_I2C_Start &rArr; OLED_W_SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_W_SDA
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_W_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>

<P><STRONG><a name="[ee]"></a>OLED_I2C_Stop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled.o(i.OLED_I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_I2C_Stop &rArr; OLED_W_SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_W_SDA
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_W_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>

<P><STRONG><a name="[82]"></a>OLED_Init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_Init &rArr; OLED_Clear &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte &rArr; OLED_W_SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>

<P><STRONG><a name="[f1]"></a>OLED_Pow</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, oled.o(i.OLED_Pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowSignedNum
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowHexNum
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowBinNum
</UL>

<P><STRONG><a name="[e7]"></a>OLED_SetCursor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, oled.o(i.OLED_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte &rArr; OLED_W_SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[f0]"></a>OLED_ShowBinNum</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, oled.o(i.OLED_ShowBinNum), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pow
</UL>

<P><STRONG><a name="[f2]"></a>OLED_ShowChar</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, oled.o(i.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte &rArr; OLED_W_SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowSignedNum
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowHexNum
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowBinNum
</UL>

<P><STRONG><a name="[f3]"></a>OLED_ShowHexNum</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, oled.o(i.OLED_ShowHexNum), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pow
</UL>

<P><STRONG><a name="[f4]"></a>OLED_ShowNum</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, oled.o(i.OLED_ShowNum), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pow
</UL>

<P><STRONG><a name="[c9]"></a>OLED_ShowSignedNum</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, oled.o(i.OLED_ShowSignedNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OLED_ShowSignedNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte &rArr; OLED_W_SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_Show
</UL>

<P><STRONG><a name="[c8]"></a>OLED_ShowString</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, oled.o(i.OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte &rArr; OLED_W_SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_Show
</UL>

<P><STRONG><a name="[ea]"></a>OLED_W_SCL</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oled.o(i.OLED_W_SCL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_W_SCL
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Stop
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Start
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_SendByte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
</UL>

<P><STRONG><a name="[eb]"></a>OLED_W_SDA</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oled.o(i.OLED_W_SDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_W_SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Stop
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Start
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_SendByte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
</UL>

<P><STRONG><a name="[ef]"></a>OLED_WriteCommand</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, oled.o(i.OLED_WriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_WriteCommand &rArr; OLED_I2C_SendByte &rArr; OLED_W_SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Stop
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Start
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
</UL>

<P><STRONG><a name="[e8]"></a>OLED_WriteData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, oled.o(i.OLED_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_WriteData &rArr; OLED_I2C_SendByte &rArr; OLED_W_SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Stop
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Start
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[118]"></a>OSDebugInit</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, os_dbg_r.o(i.OSDebugInit))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[f6]"></a>OSEventNameGet</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, os_core.o(i.OSEventNameGet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[fa]"></a>OSEventNameSet</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, os_core.o(i.OSEventNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSEventNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[fb]"></a>OSEventPendMulti</STRONG> (Thumb, 726 bytes, Stack size 64 bytes, os_core.o(i.OSEventPendMulti), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWaitMulti
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[ff]"></a>OSFlagAccept</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, os_flag.o(i.OSFlagAccept), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[100]"></a>OSFlagCreate</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_flag.o(i.OSFlagCreate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[101]"></a>OSFlagDel</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, os_flag.o(i.OSFlagDel), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[103]"></a>OSFlagNameGet</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, os_flag.o(i.OSFlagNameGet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[104]"></a>OSFlagNameSet</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, os_flag.o(i.OSFlagNameSet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[105]"></a>OSFlagPend</STRONG> (Thumb, 652 bytes, Stack size 72 bytes, os_flag.o(i.OSFlagPend), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[108]"></a>OSFlagPendGetFlagsRdy</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, os_flag.o(i.OSFlagPendGetFlagsRdy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[109]"></a>OSFlagPost</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, os_flag.o(i.OSFlagPost), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[10a]"></a>OSFlagQuery</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, os_flag.o(i.OSFlagQuery), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[10b]"></a>OSInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDebugInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymain
</UL>

<P><STRONG><a name="[10c]"></a>OSInitHookBegin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[117]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1a1]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>OSIntExit</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>OSMboxAccept</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, os_mbox.o(i.OSMboxAccept), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[11d]"></a>OSMboxCreate</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, os_mbox.o(i.OSMboxCreate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[11f]"></a>OSMboxDel</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, os_mbox.o(i.OSMboxDel), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[121]"></a>OSMboxPend</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, os_mbox.o(i.OSMboxPend), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[124]"></a>OSMboxPendAbort</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, os_mbox.o(i.OSMboxPendAbort), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[125]"></a>OSMboxPost</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, os_mbox.o(i.OSMboxPost), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[126]"></a>OSMboxPostOpt</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, os_mbox.o(i.OSMboxPostOpt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[127]"></a>OSMboxQuery</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, os_mbox.o(i.OSMboxQuery), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[128]"></a>OSMemCreate</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, os_mem.o(i.OSMemCreate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[129]"></a>OSMemGet</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, os_mem.o(i.OSMemGet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[12a]"></a>OSMemNameGet</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_mem.o(i.OSMemNameGet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[12b]"></a>OSMemNameSet</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_mem.o(i.OSMemNameSet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[12c]"></a>OSMemPut</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, os_mem.o(i.OSMemPut), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[12d]"></a>OSMemQuery</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, os_mem.o(i.OSMemQuery), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[12e]"></a>OSMutexAccept</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, os_mutex.o(i.OSMutexAccept), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[12f]"></a>OSMutexCreate</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, os_mutex.o(i.OSMutexCreate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[130]"></a>OSMutexDel</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, os_mutex.o(i.OSMutexDel), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutex_RdyAtPrio
</UL>

<P><STRONG><a name="[132]"></a>OSMutexPend</STRONG> (Thumb, 602 bytes, Stack size 56 bytes, os_mutex.o(i.OSMutexPend), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[133]"></a>OSMutexPost</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, os_mutex.o(i.OSMutexPost), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutex_RdyAtPrio
</UL>

<P><STRONG><a name="[134]"></a>OSMutexQuery</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, os_mutex.o(i.OSMutexQuery), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[135]"></a>OSQAccept</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, os_q.o(i.OSQAccept), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[136]"></a>OSQCreate</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, os_q.o(i.OSQCreate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[137]"></a>OSQDel</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, os_q.o(i.OSQDel), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[138]"></a>OSQFlush</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, os_q.o(i.OSQFlush), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[139]"></a>OSQPend</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, os_q.o(i.OSQPend), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[13a]"></a>OSQPendAbort</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, os_q.o(i.OSQPendAbort), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[13b]"></a>OSQPost</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, os_q.o(i.OSQPost), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[13c]"></a>OSQPostFront</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, os_q.o(i.OSQPostFront), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[13d]"></a>OSQPostOpt</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, os_q.o(i.OSQPostOpt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[13e]"></a>OSQQuery</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, os_q.o(i.OSQQuery), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[13f]"></a>OSSchedLock</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_core.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[140]"></a>OSSchedUnlock</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, os_core.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[141]"></a>OSSemAccept</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, os_sem.o(i.OSSemAccept), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[142]"></a>OSSemCreate</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[143]"></a>OSSemDel</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, os_sem.o(i.OSSemDel), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[144]"></a>OSSemPend</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[145]"></a>OSSemPendAbort</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, os_sem.o(i.OSSemPendAbort), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[146]"></a>OSSemPost</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, os_sem.o(i.OSSemPost), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>

<P><STRONG><a name="[147]"></a>OSSemQuery</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, os_sem.o(i.OSSemQuery), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[148]"></a>OSSemSet</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, os_sem.o(i.OSSemSet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[149]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymain
</UL>

<P><STRONG><a name="[14b]"></a>OSStatInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, os_core.o(i.OSStatInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[176]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[14d]"></a>OSTaskChangePrio</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, os_task.o(i.OSTaskChangePrio), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[14e]"></a>OSTaskCreate</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymain
</UL>

<P><STRONG><a name="[151]"></a>OSTaskCreateExt</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
</UL>

<P><STRONG><a name="[177]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[153]"></a>OSTaskDel</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, os_task.o(i.OSTaskDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[155]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskDelHook))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[156]"></a>OSTaskDelReq</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, os_task.o(i.OSTaskDelReq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[178]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[157]"></a>OSTaskNameGet</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, os_task.o(i.OSTaskNameGet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[158]"></a>OSTaskNameSet</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
</UL>

<P><STRONG><a name="[159]"></a>OSTaskQuery</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, os_task.o(i.OSTaskQuery), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[15b]"></a>OSTaskRegGet</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, os_task.o(i.OSTaskRegGet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[15c]"></a>OSTaskRegGetID</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, os_task.o(i.OSTaskRegGetID), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[15d]"></a>OSTaskRegSet</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, os_task.o(i.OSTaskRegSet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[15e]"></a>OSTaskResume</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, os_task.o(i.OSTaskResume), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[179]"></a>OSTaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskReturnHook))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[17a]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[15f]"></a>OSTaskStkChk</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[14f]"></a>OSTaskStkInit</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[160]"></a>OSTaskSuspend</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[14c]"></a>OSTimeDly</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RCControl
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Display
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task1
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>

<P><STRONG><a name="[161]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, os_time.o(i.OSTimeDlyHMSM), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[162]"></a>OSTimeDlyResume</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDlyResume), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[163]"></a>OSTimeGet</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, os_time.o(i.OSTimeGet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[164]"></a>OSTimeSet</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, os_time.o(i.OSTimeSet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[165]"></a>OSTimeTick</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[166]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[167]"></a>OSTmrCreate</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, os_tmr.o(i.OSTmrCreate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Alloc
</UL>

<P><STRONG><a name="[169]"></a>OSTmrDel</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, os_tmr.o(i.OSTmrDel), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Free
</UL>

<P><STRONG><a name="[16c]"></a>OSTmrNameGet</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, os_tmr.o(i.OSTmrNameGet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[16d]"></a>OSTmrRemainGet</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, os_tmr.o(i.OSTmrRemainGet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[16e]"></a>OSTmrSignal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmrSignal), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[16f]"></a>OSTmrStart</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, os_tmr.o(i.OSTmrStart), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
</UL>

<P><STRONG><a name="[171]"></a>OSTmrStateGet</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, os_tmr.o(i.OSTmrStateGet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[172]"></a>OSTmrStop</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, os_tmr.o(i.OSTmrStop), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
</UL>

<P><STRONG><a name="[116]"></a>OSTmr_Init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, os_tmr.o(i.OSTmr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[36e]"></a>OSVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_core.o(i.OSVersion), UNUSED)

<P><STRONG><a name="[154]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(i.OS_Dummy))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[120]"></a>OS_EventTaskRdy</STRONG> (Thumb, 132 bytes, Stack size 36 bytes, os_core.o(i.OS_EventTaskRdy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
</UL>

<P><STRONG><a name="[123]"></a>OS_EventTaskRemove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>

<P><STRONG><a name="[fe]"></a>OS_EventTaskRemoveMulti</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, os_core.o(i.OS_EventTaskRemoveMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[122]"></a>OS_EventTaskWait</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>

<P><STRONG><a name="[fc]"></a>OS_EventTaskWaitMulti</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, os_core.o(i.OS_EventTaskWaitMulti), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[11e]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>

<P><STRONG><a name="[111]"></a>OS_FlagInit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[107]"></a>OS_FlagUnlink</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, os_flag.o(i.OS_FlagUnlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[173]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[15a]"></a>OS_MemCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(i.OS_MemCopy), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[112]"></a>OS_MemInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_mem.o(i.OS_MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[113]"></a>OS_QInit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[fd]"></a>OS_Sched</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
</UL>

<P><STRONG><a name="[f8]"></a>OS_StrLen</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_StrLen), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
</UL>

<P><STRONG><a name="[150]"></a>OS_TCBInit</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[60]"></a>OS_TaskIdle</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[5e]"></a>OS_TaskReturn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_task.o(i.OS_TaskReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(i.OSTaskStkInit)
</UL>
<P><STRONG><a name="[61]"></a>OS_TaskStat</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskStat)
</UL>
<P><STRONG><a name="[17b]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(i.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[152]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[83]"></a>PPM_Init</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, ppm.o(i.PPM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = PPM_Init &rArr; TIM_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectSlaveMode
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>

<P><STRONG><a name="[df]"></a>PWM_SetCompare</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, motor.o(i.PWM_SetCompare))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TEST
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_ALL_ESC
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_ESC
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_SetSpeed
</UL>

<P><STRONG><a name="[186]"></a>PWM_TEST</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, final.o(i.PWM_TEST))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_TEST
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RCControl
</UL>

<P><STRONG><a name="[36f]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_BackupAccessCmd), UNUSED)

<P><STRONG><a name="[370]"></a>PWR_BackupRegulatorCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_BackupRegulatorCmd), UNUSED)

<P><STRONG><a name="[371]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_ClearFlag), UNUSED)

<P><STRONG><a name="[187]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(i.PWR_DeInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[372]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_EnterSTANDBYMode), UNUSED)

<P><STRONG><a name="[373]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(i.PWR_EnterSTOPMode), UNUSED)

<P><STRONG><a name="[374]"></a>PWR_EnterUnderDriveSTOPMode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(i.PWR_EnterUnderDriveSTOPMode), UNUSED)

<P><STRONG><a name="[375]"></a>PWR_FlashPowerDownCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_FlashPowerDownCmd), UNUSED)

<P><STRONG><a name="[376]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_GetFlagStatus), UNUSED)

<P><STRONG><a name="[377]"></a>PWR_LowRegulatorLowVoltageCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_LowRegulatorLowVoltageCmd), UNUSED)

<P><STRONG><a name="[378]"></a>PWR_MainRegulatorLowVoltageCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_MainRegulatorLowVoltageCmd), UNUSED)

<P><STRONG><a name="[379]"></a>PWR_MainRegulatorModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_MainRegulatorModeConfig), UNUSED)

<P><STRONG><a name="[37a]"></a>PWR_OverDriveCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_OverDriveCmd), UNUSED)

<P><STRONG><a name="[37b]"></a>PWR_OverDriveSWCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_OverDriveSWCmd), UNUSED)

<P><STRONG><a name="[37c]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_PVDCmd), UNUSED)

<P><STRONG><a name="[37d]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_PVDLevelConfig), UNUSED)

<P><STRONG><a name="[37e]"></a>PWR_UnderDriveCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_UnderDriveCmd), UNUSED)

<P><STRONG><a name="[37f]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_WakeUpPinCmd), UNUSED)

<P><STRONG><a name="[b8]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_GPIO_Config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
</UL>

<P><STRONG><a name="[380]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockLPModeCmd), UNUSED)

<P><STRONG><a name="[a1]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphResetCmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_DeInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[381]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphClockCmd), UNUSED)

<P><STRONG><a name="[382]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphClockLPModeCmd), UNUSED)

<P><STRONG><a name="[9c]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphResetCmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYP_DeInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_DeInit
</UL>

<P><STRONG><a name="[17c]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DELAY_INIT
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
</UL>

<P><STRONG><a name="[383]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockLPModeCmd), UNUSED)

<P><STRONG><a name="[86]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DeInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_DeInit
</UL>

<P><STRONG><a name="[384]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd), UNUSED)

<P><STRONG><a name="[385]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockLPModeCmd), UNUSED)

<P><STRONG><a name="[7c]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_DeInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DeInit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DeInit
</UL>

<P><STRONG><a name="[386]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AdjustHSICalibrationValue), UNUSED)

<P><STRONG><a name="[387]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_BackupResetCmd), UNUSED)

<P><STRONG><a name="[388]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_ClearFlag), UNUSED)

<P><STRONG><a name="[389]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_ClearITPendingBit), UNUSED)

<P><STRONG><a name="[38a]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_ClockSecuritySystemCmd), UNUSED)

<P><STRONG><a name="[38b]"></a>RCC_DeInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_DeInit), UNUSED)

<P><STRONG><a name="[da]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[189]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(i.RCC_GetFlagStatus), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[38c]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_GetITStatus), UNUSED)

<P><STRONG><a name="[38d]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_GetSYSCLKSource), UNUSED)

<P><STRONG><a name="[38e]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_HCLKConfig), UNUSED)

<P><STRONG><a name="[38f]"></a>RCC_HSEConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_HSEConfig), UNUSED)

<P><STRONG><a name="[390]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_HSICmd), UNUSED)

<P><STRONG><a name="[391]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_I2SCLKConfig), UNUSED)

<P><STRONG><a name="[392]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_ITConfig), UNUSED)

<P><STRONG><a name="[393]"></a>RCC_LSEConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_LSEConfig), UNUSED)

<P><STRONG><a name="[394]"></a>RCC_LSEModeConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_LSEModeConfig), UNUSED)

<P><STRONG><a name="[395]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_LSICmd), UNUSED)

<P><STRONG><a name="[396]"></a>RCC_LTDCCLKDivConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_LTDCCLKDivConfig), UNUSED)

<P><STRONG><a name="[397]"></a>RCC_MCO1Config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_MCO1Config), UNUSED)

<P><STRONG><a name="[398]"></a>RCC_MCO2Config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_MCO2Config), UNUSED)

<P><STRONG><a name="[399]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_PCLK1Config), UNUSED)

<P><STRONG><a name="[39a]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_PCLK2Config), UNUSED)

<P><STRONG><a name="[39b]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_PLLCmd), UNUSED)

<P><STRONG><a name="[39c]"></a>RCC_PLLConfig</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_PLLConfig), UNUSED)

<P><STRONG><a name="[39d]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_PLLI2SCmd), UNUSED)

<P><STRONG><a name="[39e]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_PLLI2SConfig), UNUSED)

<P><STRONG><a name="[39f]"></a>RCC_PLLSAICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_PLLSAICmd), UNUSED)

<P><STRONG><a name="[3a0]"></a>RCC_PLLSAIConfig</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(i.RCC_PLLSAIConfig), UNUSED)

<P><STRONG><a name="[3a1]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKCmd), UNUSED)

<P><STRONG><a name="[3a2]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKConfig), UNUSED)

<P><STRONG><a name="[3a3]"></a>RCC_SAIPLLI2SClkDivConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_SAIPLLI2SClkDivConfig), UNUSED)

<P><STRONG><a name="[3a4]"></a>RCC_SAIPLLSAIClkDivConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_SAIPLLSAIClkDivConfig), UNUSED)

<P><STRONG><a name="[3a5]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_SYSCLKConfig), UNUSED)

<P><STRONG><a name="[3a6]"></a>RCC_TIMCLKPresConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_TIMCLKPresConfig), UNUSED)

<P><STRONG><a name="[188]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_WaitForHSEStartUp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[3a7]"></a>RTC_AlarmCmd</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_AlarmCmd), UNUSED)

<P><STRONG><a name="[3a8]"></a>RTC_AlarmStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_AlarmStructInit), UNUSED)

<P><STRONG><a name="[3a9]"></a>RTC_AlarmSubSecondConfig</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(i.RTC_AlarmSubSecondConfig), UNUSED)

<P><STRONG><a name="[3aa]"></a>RTC_BypassShadowCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_BypassShadowCmd), UNUSED)

<P><STRONG><a name="[3ab]"></a>RTC_CalibOutputCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_CalibOutputCmd), UNUSED)

<P><STRONG><a name="[3ac]"></a>RTC_CalibOutputConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_CalibOutputConfig), UNUSED)

<P><STRONG><a name="[3ad]"></a>RTC_ClearFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ClearFlag), UNUSED)

<P><STRONG><a name="[3ae]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ClearITPendingBit), UNUSED)

<P><STRONG><a name="[18a]"></a>RTC_CoarseCalibCmd</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(i.RTC_CoarseCalibCmd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[18d]"></a>RTC_CoarseCalibConfig</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_CoarseCalibConfig), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[3af]"></a>RTC_DateStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_DateStructInit), UNUSED)

<P><STRONG><a name="[3b0]"></a>RTC_DayLightSavingConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_DayLightSavingConfig), UNUSED)

<P><STRONG><a name="[18e]"></a>RTC_DeInit</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_DeInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[18b]"></a>RTC_EnterInitMode</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_EnterInitMode), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
</UL>

<P><STRONG><a name="[18c]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ExitInitMode), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
</UL>

<P><STRONG><a name="[190]"></a>RTC_GetAlarm</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_GetAlarm), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[3b1]"></a>RTC_GetAlarmSubSecond</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_GetAlarmSubSecond), UNUSED)

<P><STRONG><a name="[192]"></a>RTC_GetDate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_GetDate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[3b2]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_GetFlagStatus), UNUSED)

<P><STRONG><a name="[3b3]"></a>RTC_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(i.RTC_GetITStatus), UNUSED)

<P><STRONG><a name="[3b4]"></a>RTC_GetStoreOperation</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_GetStoreOperation), UNUSED)

<P><STRONG><a name="[3b5]"></a>RTC_GetSubSecond</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_GetSubSecond), UNUSED)

<P><STRONG><a name="[193]"></a>RTC_GetTime</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_GetTime), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[194]"></a>RTC_GetTimeStamp</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_GetTimeStamp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[3b6]"></a>RTC_GetTimeStampSubSecond</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_GetTimeStampSubSecond), UNUSED)

<P><STRONG><a name="[3b7]"></a>RTC_GetWakeUpCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_GetWakeUpCounter), UNUSED)

<P><STRONG><a name="[3b8]"></a>RTC_ITConfig</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ITConfig), UNUSED)

<P><STRONG><a name="[195]"></a>RTC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(i.RTC_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[3b9]"></a>RTC_OutputConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_OutputConfig), UNUSED)

<P><STRONG><a name="[3ba]"></a>RTC_OutputTypeConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_OutputTypeConfig), UNUSED)

<P><STRONG><a name="[3bb]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_ReadBackupRegister), UNUSED)

<P><STRONG><a name="[196]"></a>RTC_RefClockCmd</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(i.RTC_RefClockCmd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[197]"></a>RTC_SetAlarm</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetAlarm), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[199]"></a>RTC_SetDate</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetDate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[19a]"></a>RTC_SetTime</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetTime), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[3bc]"></a>RTC_SetWakeUpCounter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_SetWakeUpCounter), UNUSED)

<P><STRONG><a name="[3bd]"></a>RTC_SmoothCalibConfig</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_SmoothCalibConfig), UNUSED)

<P><STRONG><a name="[3be]"></a>RTC_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_StructInit), UNUSED)

<P><STRONG><a name="[19b]"></a>RTC_SynchroShiftConfig</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, stm32f4xx_rtc.o(i.RTC_SynchroShiftConfig), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[3bf]"></a>RTC_TamperCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_TamperCmd), UNUSED)

<P><STRONG><a name="[3c0]"></a>RTC_TamperFilterConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_TamperFilterConfig), UNUSED)

<P><STRONG><a name="[3c1]"></a>RTC_TamperPinSelection</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_TamperPinSelection), UNUSED)

<P><STRONG><a name="[3c2]"></a>RTC_TamperPinsPrechargeDuration</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_TamperPinsPrechargeDuration), UNUSED)

<P><STRONG><a name="[3c3]"></a>RTC_TamperPullUpCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_TamperPullUpCmd), UNUSED)

<P><STRONG><a name="[3c4]"></a>RTC_TamperSamplingFreqConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_TamperSamplingFreqConfig), UNUSED)

<P><STRONG><a name="[3c5]"></a>RTC_TamperTriggerConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_TamperTriggerConfig), UNUSED)

<P><STRONG><a name="[3c6]"></a>RTC_TimeStampCmd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_TimeStampCmd), UNUSED)

<P><STRONG><a name="[3c7]"></a>RTC_TimeStampOnTamperDetectionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_TimeStampOnTamperDetectionCmd), UNUSED)

<P><STRONG><a name="[3c8]"></a>RTC_TimeStampPinSelection</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_TimeStampPinSelection), UNUSED)

<P><STRONG><a name="[3c9]"></a>RTC_TimeStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_TimeStructInit), UNUSED)

<P><STRONG><a name="[18f]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_WaitForSynchro), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SynchroShiftConfig
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[3ca]"></a>RTC_WakeUpClockConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_WakeUpClockConfig), UNUSED)

<P><STRONG><a name="[3cb]"></a>RTC_WakeUpCmd</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(i.RTC_WakeUpCmd), UNUSED)

<P><STRONG><a name="[3cc]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_WriteBackupRegister), UNUSED)

<P><STRONG><a name="[3cd]"></a>RTC_WriteProtectionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_WriteProtectionCmd), UNUSED)

<P><STRONG><a name="[3ce]"></a>SAI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_ClearFlag), UNUSED)

<P><STRONG><a name="[3cf]"></a>SAI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_ClearITPendingBit), UNUSED)

<P><STRONG><a name="[3d0]"></a>SAI_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_Cmd), UNUSED)

<P><STRONG><a name="[3d1]"></a>SAI_CompandingModeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_CompandingModeConfig), UNUSED)

<P><STRONG><a name="[3d2]"></a>SAI_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_DMACmd), UNUSED)

<P><STRONG><a name="[19c]"></a>SAI_DeInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_sai.o(i.SAI_DeInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[3d3]"></a>SAI_FlushFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_FlushFIFO), UNUSED)

<P><STRONG><a name="[3d4]"></a>SAI_FrameInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_sai.o(i.SAI_FrameInit), UNUSED)

<P><STRONG><a name="[3d5]"></a>SAI_FrameStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_FrameStructInit), UNUSED)

<P><STRONG><a name="[3d6]"></a>SAI_GetCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_GetCmdStatus), UNUSED)

<P><STRONG><a name="[3d7]"></a>SAI_GetFIFOStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_GetFIFOStatus), UNUSED)

<P><STRONG><a name="[3d8]"></a>SAI_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_GetFlagStatus), UNUSED)

<P><STRONG><a name="[3d9]"></a>SAI_GetITStatus</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_sai.o(i.SAI_GetITStatus), UNUSED)

<P><STRONG><a name="[3da]"></a>SAI_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_ITConfig), UNUSED)

<P><STRONG><a name="[3db]"></a>SAI_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_sai.o(i.SAI_Init), UNUSED)

<P><STRONG><a name="[3dc]"></a>SAI_MonoModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_MonoModeConfig), UNUSED)

<P><STRONG><a name="[3dd]"></a>SAI_MuteFrameCounterConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_MuteFrameCounterConfig), UNUSED)

<P><STRONG><a name="[3de]"></a>SAI_MuteModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_MuteModeCmd), UNUSED)

<P><STRONG><a name="[3df]"></a>SAI_MuteValueConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_MuteValueConfig), UNUSED)

<P><STRONG><a name="[3e0]"></a>SAI_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_ReceiveData), UNUSED)

<P><STRONG><a name="[3e1]"></a>SAI_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_SendData), UNUSED)

<P><STRONG><a name="[3e2]"></a>SAI_SlotInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_sai.o(i.SAI_SlotInit), UNUSED)

<P><STRONG><a name="[3e3]"></a>SAI_SlotStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_SlotStructInit), UNUSED)

<P><STRONG><a name="[3e4]"></a>SAI_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_StructInit), UNUSED)

<P><STRONG><a name="[3e5]"></a>SAI_TRIStateConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_sai.o(i.SAI_TRIStateConfig), UNUSED)

<P><STRONG><a name="[e4]"></a>SCL_W</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gy86.o(i.SCL_W))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCL_W
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Stop
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendByte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendAck
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveByte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveAck
</UL>

<P><STRONG><a name="[e5]"></a>SDA_R</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gy86.o(i.SDA_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDA_R
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveByte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveAck
</UL>

<P><STRONG><a name="[e3]"></a>SDA_W</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gy86.o(i.SDA_W))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDA_W
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Stop
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendByte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendAck
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveByte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveAck
</UL>

<P><STRONG><a name="[3e6]"></a>SDIO_CEATAITCmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_CEATAITCmd), UNUSED)

<P><STRONG><a name="[3e7]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearFlag), UNUSED)

<P><STRONG><a name="[3e8]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearITPendingBit), UNUSED)

<P><STRONG><a name="[3e9]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClockCmd), UNUSED)

<P><STRONG><a name="[3ea]"></a>SDIO_CmdStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_CmdStructInit), UNUSED)

<P><STRONG><a name="[3eb]"></a>SDIO_CommandCompletionCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_CommandCompletionCmd), UNUSED)

<P><STRONG><a name="[3ec]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_DMACmd), UNUSED)

<P><STRONG><a name="[3ed]"></a>SDIO_DataConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_DataConfig), UNUSED)

<P><STRONG><a name="[3ee]"></a>SDIO_DataStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_DataStructInit), UNUSED)

<P><STRONG><a name="[19e]"></a>SDIO_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_DeInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[3ef]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetCommandResponse), UNUSED)

<P><STRONG><a name="[3f0]"></a>SDIO_GetDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetDataCounter), UNUSED)

<P><STRONG><a name="[3f1]"></a>SDIO_GetFIFOCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetFIFOCount), UNUSED)

<P><STRONG><a name="[3f2]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetFlagStatus), UNUSED)

<P><STRONG><a name="[3f3]"></a>SDIO_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetITStatus), UNUSED)

<P><STRONG><a name="[3f4]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetPowerState), UNUSED)

<P><STRONG><a name="[3f5]"></a>SDIO_GetResponse</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_GetResponse), UNUSED)

<P><STRONG><a name="[3f6]"></a>SDIO_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ITConfig), UNUSED)

<P><STRONG><a name="[3f7]"></a>SDIO_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_Init), UNUSED)

<P><STRONG><a name="[3f8]"></a>SDIO_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ReadData), UNUSED)

<P><STRONG><a name="[3f9]"></a>SDIO_SendCEATACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SendCEATACmd), UNUSED)

<P><STRONG><a name="[3fa]"></a>SDIO_SendCommand</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SendCommand), UNUSED)

<P><STRONG><a name="[3fb]"></a>SDIO_SendSDIOSuspendCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SendSDIOSuspendCmd), UNUSED)

<P><STRONG><a name="[3fc]"></a>SDIO_SetPowerState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SetPowerState), UNUSED)

<P><STRONG><a name="[3fd]"></a>SDIO_SetSDIOOperation</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SetSDIOOperation), UNUSED)

<P><STRONG><a name="[3fe]"></a>SDIO_SetSDIOReadWaitMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SetSDIOReadWaitMode), UNUSED)

<P><STRONG><a name="[3ff]"></a>SDIO_StartSDIOReadWait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_StartSDIOReadWait), UNUSED)

<P><STRONG><a name="[400]"></a>SDIO_StopSDIOReadWait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_StopSDIOReadWait), UNUSED)

<P><STRONG><a name="[401]"></a>SDIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_StructInit), UNUSED)

<P><STRONG><a name="[402]"></a>SDIO_WriteData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_WriteData), UNUSED)

<P><STRONG><a name="[403]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_BiDirectionalLineConfig), UNUSED)

<P><STRONG><a name="[404]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_CalculateCRC), UNUSED)

<P><STRONG><a name="[405]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd), UNUSED)

<P><STRONG><a name="[406]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_DataSizeConfig), UNUSED)

<P><STRONG><a name="[407]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_GetCRC), UNUSED)

<P><STRONG><a name="[408]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_GetCRCPolynomial), UNUSED)

<P><STRONG><a name="[409]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ClearFlag), UNUSED)

<P><STRONG><a name="[40a]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_I2S_ClearITPendingBit), UNUSED)

<P><STRONG><a name="[40b]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_DMACmd), UNUSED)

<P><STRONG><a name="[19f]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_I2S_DeInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[40c]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus), UNUSED)

<P><STRONG><a name="[40d]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetITStatus), UNUSED)

<P><STRONG><a name="[40e]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f4xx_spi.o(i.SPI_I2S_ITConfig), UNUSED)

<P><STRONG><a name="[40f]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData), UNUSED)

<P><STRONG><a name="[410]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData), UNUSED)

<P><STRONG><a name="[411]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_Init), UNUSED)

<P><STRONG><a name="[412]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_NSSInternalSoftwareConfig), UNUSED)

<P><STRONG><a name="[413]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_SSOutputCmd), UNUSED)

<P><STRONG><a name="[414]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_StructInit), UNUSED)

<P><STRONG><a name="[415]"></a>SPI_TIModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_TIModeCmd), UNUSED)

<P><STRONG><a name="[416]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_TransmitCRC), UNUSED)

<P><STRONG><a name="[417]"></a>SYSCFG_CompensationCellCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(i.SYSCFG_CompensationCellCmd), UNUSED)

<P><STRONG><a name="[1a0]"></a>SYSCFG_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(i.SYSCFG_DeInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[418]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(i.SYSCFG_ETH_MediaInterfaceConfig), UNUSED)

<P><STRONG><a name="[419]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_syscfg.o(i.SYSCFG_EXTILineConfig), UNUSED)

<P><STRONG><a name="[41a]"></a>SYSCFG_GetCompensationCellStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(i.SYSCFG_GetCompensationCellStatus), UNUSED)

<P><STRONG><a name="[41b]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(i.SYSCFG_MemoryRemapConfig), UNUSED)

<P><STRONG><a name="[41c]"></a>SYSCFG_MemorySwappingBank</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(i.SYSCFG_MemorySwappingBank), UNUSED)

<P><STRONG><a name="[41d]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig), UNUSED)

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, os_cpu_c.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>TIM1_Config</STRONG> (Thumb, 294 bytes, Stack size 0 bytes, motor.o(i.TIM1_Config))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_Init
</UL>

<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ppm.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[41e]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig), UNUSED)

<P><STRONG><a name="[41f]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_BDTRConfig), UNUSED)

<P><STRONG><a name="[420]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_BDTRStructInit), UNUSED)

<P><STRONG><a name="[421]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_CCPreloadControl), UNUSED)

<P><STRONG><a name="[422]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_CCxCmd), UNUSED)

<P><STRONG><a name="[423]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_CCxNCmd), UNUSED)

<P><STRONG><a name="[424]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearFlag), UNUSED)

<P><STRONG><a name="[1a3]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[425]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearOC1Ref), UNUSED)

<P><STRONG><a name="[426]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearOC2Ref), UNUSED)

<P><STRONG><a name="[427]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearOC3Ref), UNUSED)

<P><STRONG><a name="[428]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearOC4Ref), UNUSED)

<P><STRONG><a name="[185]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DELAY_INIT
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
</UL>

<P><STRONG><a name="[429]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_CounterModeConfig), UNUSED)

<P><STRONG><a name="[42a]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_CtrlPWMOutputs), UNUSED)

<P><STRONG><a name="[7f]"></a>TIM_DELAY_INIT</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, delay.o(i.TIM_DELAY_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_DELAY_INIT
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>

<P><STRONG><a name="[42b]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_DMACmd), UNUSED)

<P><STRONG><a name="[42c]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_DMAConfig), UNUSED)

<P><STRONG><a name="[1a4]"></a>TIM_DeInit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, stm32f4xx_tim.o(i.TIM_DeInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[1a5]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f4xx_tim.o(i.TIM_ETRClockMode1Config), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[1a7]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TIM_ETRClockMode2Config), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[1a6]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_ETRConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[42d]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TIM_EncoderInterfaceConfig), UNUSED)

<P><STRONG><a name="[42e]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ForcedOC1Config), UNUSED)

<P><STRONG><a name="[42f]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ForcedOC2Config), UNUSED)

<P><STRONG><a name="[430]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ForcedOC3Config), UNUSED)

<P><STRONG><a name="[431]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ForcedOC4Config), UNUSED)

<P><STRONG><a name="[432]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GenerateEvent), UNUSED)

<P><STRONG><a name="[433]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture1), UNUSED)

<P><STRONG><a name="[434]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture2), UNUSED)

<P><STRONG><a name="[435]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture3), UNUSED)

<P><STRONG><a name="[436]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture4), UNUSED)

<P><STRONG><a name="[437]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCounter), UNUSED)

<P><STRONG><a name="[438]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetFlagStatus), UNUSED)

<P><STRONG><a name="[1a2]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[439]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetPrescaler), UNUSED)

<P><STRONG><a name="[17f]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
</UL>

<P><STRONG><a name="[43a]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ICStructInit), UNUSED)

<P><STRONG><a name="[182]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
</UL>

<P><STRONG><a name="[1b0]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_ITRxExternalClockConfig), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[43b]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_InternalClockConfig), UNUSED)

<P><STRONG><a name="[43c]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1FastConfig), UNUSED)

<P><STRONG><a name="[43d]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC1Init), UNUSED)

<P><STRONG><a name="[43e]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1NPolarityConfig), UNUSED)

<P><STRONG><a name="[43f]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PolarityConfig), UNUSED)

<P><STRONG><a name="[440]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig), UNUSED)

<P><STRONG><a name="[441]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2FastConfig), UNUSED)

<P><STRONG><a name="[442]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC2Init), UNUSED)

<P><STRONG><a name="[443]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2NPolarityConfig), UNUSED)

<P><STRONG><a name="[444]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PolarityConfig), UNUSED)

<P><STRONG><a name="[445]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PreloadConfig), UNUSED)

<P><STRONG><a name="[446]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3FastConfig), UNUSED)

<P><STRONG><a name="[447]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC3Init), UNUSED)

<P><STRONG><a name="[448]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3NPolarityConfig), UNUSED)

<P><STRONG><a name="[449]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PolarityConfig), UNUSED)

<P><STRONG><a name="[44a]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PreloadConfig), UNUSED)

<P><STRONG><a name="[44b]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4FastConfig), UNUSED)

<P><STRONG><a name="[44c]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC4Init), UNUSED)

<P><STRONG><a name="[44d]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PolarityConfig), UNUSED)

<P><STRONG><a name="[44e]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PreloadConfig), UNUSED)

<P><STRONG><a name="[44f]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OCStructInit), UNUSED)

<P><STRONG><a name="[1b1]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_tim.o(i.TIM_PWMIConfig), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
</UL>

<P><STRONG><a name="[450]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_PrescalerConfig), UNUSED)

<P><STRONG><a name="[451]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_RemapConfig), UNUSED)

<P><STRONG><a name="[452]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectCCDMA), UNUSED)

<P><STRONG><a name="[453]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectCOM), UNUSED)

<P><STRONG><a name="[454]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectHallSensor), UNUSED)

<P><STRONG><a name="[180]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectInputTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[455]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectMasterSlaveMode), UNUSED)

<P><STRONG><a name="[456]"></a>TIM_SelectOCxM</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_SelectOCxM), UNUSED)

<P><STRONG><a name="[457]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectOnePulseMode), UNUSED)

<P><STRONG><a name="[458]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectOutputTrigger), UNUSED)

<P><STRONG><a name="[181]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectSlaveMode))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
</UL>

<P><STRONG><a name="[459]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetAutoreload), UNUSED)

<P><STRONG><a name="[45a]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetClockDivision), UNUSED)

<P><STRONG><a name="[45b]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare1), UNUSED)

<P><STRONG><a name="[45c]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare2), UNUSED)

<P><STRONG><a name="[45d]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare3), UNUSED)

<P><STRONG><a name="[45e]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare4), UNUSED)

<P><STRONG><a name="[45f]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCounter), UNUSED)

<P><STRONG><a name="[1a9]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[1ab]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[1ad]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1af]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC4Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1b2]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f4xx_tim.o(i.TIM_TIxExternalClockConfig), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
</UL>

<P><STRONG><a name="[17e]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DELAY_INIT
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
</UL>

<P><STRONG><a name="[460]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseStructInit), UNUSED)

<P><STRONG><a name="[461]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_UpdateDisableConfig), UNUSED)

<P><STRONG><a name="[462]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_UpdateRequestConfig), UNUSED)

<P><STRONG><a name="[63]"></a>Task1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mytask.o(i.Task1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Task1 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.mymain)
</UL>
<P><STRONG><a name="[64]"></a>Task2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mytask.o(i.Task2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Task2 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.mymain)
</UL>
<P><STRONG><a name="[463]"></a>Task_Comm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mytask.o(i.Task_Comm), UNUSED)

<P><STRONG><a name="[66]"></a>Task_Display</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mytask.o(i.Task_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Task_Display &rArr; GY86_Show &rArr; OLED_ShowSignedNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte &rArr; OLED_W_SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_Show
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.mymain)
</UL>
<P><STRONG><a name="[65]"></a>Task_RCControl</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mytask.o(i.Task_RCControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Task_RCControl &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TEST
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.mymain)
</UL>
<P><STRONG><a name="[464]"></a>Task_Sensor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mytask.o(i.Task_Sensor), UNUSED)

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bluetooth.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[465]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag), UNUSED)

<P><STRONG><a name="[466]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit), UNUSED)

<P><STRONG><a name="[467]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ClockInit), UNUSED)

<P><STRONG><a name="[468]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClockStructInit), UNUSED)

<P><STRONG><a name="[469]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd), UNUSED)

<P><STRONG><a name="[1b5]"></a>USART_Config</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, bluetooth.o(i.USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART_Config &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_Init
</UL>

<P><STRONG><a name="[46a]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_DMACmd), UNUSED)

<P><STRONG><a name="[1b8]"></a>USART_DeInit</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_DeInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[1bf]"></a>USART_GPIO_Init</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, bluetooth.o(i.USART_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_Init
</UL>

<P><STRONG><a name="[46b]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus), UNUSED)

<P><STRONG><a name="[46c]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus), UNUSED)

<P><STRONG><a name="[46d]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_HalfDuplexCmd), UNUSED)

<P><STRONG><a name="[46e]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig), UNUSED)

<P><STRONG><a name="[1b9]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[46f]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_IrDACmd), UNUSED)

<P><STRONG><a name="[470]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_IrDAConfig), UNUSED)

<P><STRONG><a name="[471]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_LINBreakDetectLengthConfig), UNUSED)

<P><STRONG><a name="[472]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_LINCmd), UNUSED)

<P><STRONG><a name="[473]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_OneBitMethodCmd), UNUSED)

<P><STRONG><a name="[474]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_OverSampling8Cmd), UNUSED)

<P><STRONG><a name="[475]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData), UNUSED)

<P><STRONG><a name="[476]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiverWakeUpCmd), UNUSED)

<P><STRONG><a name="[477]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendBreak), UNUSED)

<P><STRONG><a name="[cb]"></a>USART_SendByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bluetooth.o(i.USART_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_Show
</UL>

<P><STRONG><a name="[478]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData), UNUSED)

<P><STRONG><a name="[479]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SetAddress), UNUSED)

<P><STRONG><a name="[47a]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SetGuardTime), UNUSED)

<P><STRONG><a name="[47b]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SetPrescaler), UNUSED)

<P><STRONG><a name="[47c]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SmartCardCmd), UNUSED)

<P><STRONG><a name="[47d]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SmartCardNACKCmd), UNUSED)

<P><STRONG><a name="[47e]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_StructInit), UNUSED)

<P><STRONG><a name="[47f]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_WakeUpConfig), UNUSED)

<P><STRONG><a name="[80]"></a>Unlock_ALL_ESC</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, motor.o(i.Unlock_ALL_ESC))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Unlock_ALL_ESC &rArr; Delay_s &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_s
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>

<P><STRONG><a name="[1ba]"></a>Unlock_ESC</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, motor.o(i.Unlock_ESC), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_s
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetCompare
</UL>

<P><STRONG><a name="[480]"></a>WWDG_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_wwdg.o(i.WWDG_ClearFlag), UNUSED)

<P><STRONG><a name="[1bb]"></a>WWDG_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_wwdg.o(i.WWDG_DeInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[481]"></a>WWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_wwdg.o(i.WWDG_Enable), UNUSED)

<P><STRONG><a name="[482]"></a>WWDG_EnableIT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_wwdg.o(i.WWDG_EnableIT), UNUSED)

<P><STRONG><a name="[483]"></a>WWDG_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_wwdg.o(i.WWDG_GetFlagStatus), UNUSED)

<P><STRONG><a name="[484]"></a>WWDG_SetCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_wwdg.o(i.WWDG_SetCounter), UNUSED)

<P><STRONG><a name="[485]"></a>WWDG_SetPrescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_wwdg.o(i.WWDG_SetPrescaler), UNUSED)

<P><STRONG><a name="[486]"></a>WWDG_SetWindowValue</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_wwdg.o(i.WWDG_SetWindowValue), UNUSED)

<P><STRONG><a name="[1bc]"></a>__0sprintf$1</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[487]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[ca]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_Show
</UL>

<P><STRONG><a name="[84]"></a>bluetooth_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bluetooth.o(i.bluetooth_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bluetooth_Init &rArr; USART_Config &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GPIO_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>

<P><STRONG><a name="[1c0]"></a>led_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, led.o(i.led_init))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymain
</UL>

<P><STRONG><a name="[1b4]"></a>led_off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, led.o(i.led_off))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2
</UL>

<P><STRONG><a name="[1b3]"></a>led_on</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, led.o(i.led_on))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task1
</UL>

<P><STRONG><a name="[67]"></a>mymain</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(i.mymain))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mymain &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[1c1]"></a>test</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, final.o(i.test), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY86_Show
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetCompare
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[110]"></a>OS_InitEventList</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[10d]"></a>OS_InitMisc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[10e]"></a>OS_InitRdyList</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[10f]"></a>OS_InitTCBList</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[114]"></a>OS_InitTaskIdle</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[115]"></a>OS_InitTaskStat</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[11a]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[106]"></a>OS_FlagBlock</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, os_flag.o(i.OS_FlagBlock), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[102]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_flag.o(i.OS_FlagTaskRdy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[131]"></a>OSMutex_RdyAtPrio</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, os_mutex.o(i.OSMutex_RdyAtPrio), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[168]"></a>OSTmr_Alloc</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_tmr.o(i.OSTmr_Alloc), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
</UL>

<P><STRONG><a name="[16b]"></a>OSTmr_Free</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, os_tmr.o(i.OSTmr_Free), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[174]"></a>OSTmr_InitTask</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_tmr.o(i.OSTmr_InitTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[170]"></a>OSTmr_Link</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, os_tmr.o(i.OSTmr_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSTmr_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[5f]"></a>OSTmr_Task</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmr_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(i.OSTmr_InitTask)
</UL>
<P><STRONG><a name="[16a]"></a>OSTmr_Unlink</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, os_tmr.o(i.OSTmr_Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[88]"></a>CheckITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CheckITStatus), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[191]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_Bcd2ToByte), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeStamp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
</UL>

<P><STRONG><a name="[198]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ByteToBcd2), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[1a8]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[1aa]"></a>TI2_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[1ac]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TI3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1ae]"></a>TI4_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TI4_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1bd]"></a>_printf_core</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[62]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
